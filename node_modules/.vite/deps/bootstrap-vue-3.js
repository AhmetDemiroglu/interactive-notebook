import {
  Alert,
  Carousel,
  Collapse,
  Dropdown,
  Modal,
  Offcanvas,
  Popover,
  Tooltip
} from "./chunk-3TVJL4OK.js";
import "./chunk-UXK7V43H.js";
import {
  Comment,
  Fragment,
  Teleport,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  defineComponent,
  getCurrentInstance,
  guardReactiveProps,
  h,
  inject,
  isReactive,
  isRef,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onActivated,
  onBeforeUnmount,
  onMounted,
  onUnmounted,
  openBlock,
  provide,
  reactive,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  toDisplayString,
  toRef,
  unref,
  useAttrs,
  useSlots,
  vModelCheckbox,
  vModelRadio,
  vModelSelect,
  watch,
  withCtx,
  withDirectives,
  withModifiers
} from "./chunk-Y6Q652PP.js";
import "./chunk-ROME4SDB.js";

// node_modules/bootstrap-vue-3/dist/bootstrap-vue-3.es.js
var nl = Object.defineProperty;
var ol = (e, t, a) => t in e ? nl(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var ve = (e, t, a) => (ol(e, typeof t != "symbol" ? t + "" : t, a), a);
var $l = (e) => computed(
  () => e.value === "center" ? "justify-content-center" : e.value === "end" ? "justify-content-end" : "justify-content-start"
);
var it = (e, t) => Object.keys(e).filter((a) => !t.includes(a)).reduce((a, l) => ({ ...a, [l]: e[l] }), {});
var He = () => ({ enumerable: true, configurable: false, writable: false });
var lt = (e) => Array.isArray(e) ? e.map((t) => lt(t)) : e instanceof Date ? new Date(e.getTime()) : e && typeof e == "object" ? Object.getOwnPropertyNames(e).reduce((t, a) => {
  var l;
  return Object.defineProperty(t, a, (l = Object.getOwnPropertyDescriptor(e, a)) != null ? l : {}), t[a] = lt(e[a]), t;
}, Object.create(Object.getPrototypeOf(e))) : e;
var St = (e) => new Promise((t) => t(lt(e)));
var ut = class _ut {
  constructor(t, a = {}) {
    ve(this, "cancelable", true);
    ve(this, "componentId", null);
    ve(this, "defaultPrevented", false);
    ve(this, "nativeEvent", null);
    ve(this, "preventDefault");
    ve(this, "relatedTarget", null);
    ve(this, "target", null);
    ve(this, "eventType", "");
    ve(this, "vueTarget", null);
    if (!t)
      throw new TypeError(
        `Failed to construct '${this.constructor.name}'. 1 argument required, ${arguments.length} given.`
      );
    Object.assign(this, _ut.Defaults, this.constructor.Defaults, a, { eventType: t }), Object.defineProperties(this, {
      type: He(),
      cancelable: He(),
      nativeEvent: He(),
      target: He(),
      relatedTarget: He(),
      vueTarget: He(),
      componentId: He()
    });
    let l = false;
    this.preventDefault = function() {
      this.cancelable && (l = true);
    }, Object.defineProperty(this, "defaultPrevented", {
      enumerable: true,
      get() {
        return l;
      }
    });
  }
  static get Defaults() {
    return {
      eventType: "",
      cancelable: true,
      nativeEvent: null,
      target: null,
      relatedTarget: null,
      vueTarget: null,
      componentId: null
    };
  }
};
var kl = (e) => e !== null && typeof e == "object";
var ra = (e) => /^[0-9]*\.?[0-9]+$/.test(String(e));
var Sl = (e) => Object.prototype.toString.call(e) === "[object Object]";
var ia = /_/g;
var ua = /([a-z])([A-Z])/g;
var Cl = /(\s|^)(\w)/g;
var wl = /(\s|^)(\w)/;
var Qe = /\s+/;
var Tl = /^#/;
var Vl = /^#[A-Za-z]+[\w\-:.]*$/;
var Ct = (e, t = 2) => typeof e == "string" ? e : e == null ? "" : Array.isArray(e) || Sl(e) && e.toString === Object.prototype.toString ? JSON.stringify(e, null, t) : String(e);
var Dt = (e) => e.replace(ia, " ").replace(ua, (t, a, l) => `${a} ${l}`).replace(wl, (t, a, l) => a + l.toUpperCase());
var Rt = (e) => e.replace(ia, " ").replace(ua, (t, a, l) => `${a} ${l}`).replace(Cl, (t, a, l) => a + l.toUpperCase());
var _l = (e) => {
  const t = e.trim();
  return t.charAt(0).toUpperCase() + t.slice(1);
};
var yt = (e) => `\\${e}`;
var Al = (e) => {
  const t = Ct(e), { length: a } = t, l = t.charCodeAt(0);
  return t.split("").reduce((n, i, f) => {
    const d = t.charCodeAt(f);
    return d === 0 ? `${n}ï¿½` : d === 127 || d >= 1 && d <= 31 || f === 0 && d >= 48 && d <= 57 || f === 1 && d >= 48 && d <= 57 && l === 45 ? n + yt(`${d.toString(16)} `) : f === 0 && d === 45 && a === 1 ? n + yt(i) : d >= 128 || d === 45 || d === 95 || d >= 48 && d <= 57 || d >= 65 && d <= 90 || d >= 97 && d <= 122 ? n + i : n + yt(i);
  }, "");
};
var da = typeof window < "u";
var ca = typeof document < "u";
var xl = typeof navigator < "u";
var Il = da && ca && xl;
var fa = ca ? document : {};
var Pe = (e) => !!(e && e.nodeType === Node.ELEMENT_NODE);
var Fl = (e) => Pe(e) ? e.getBoundingClientRect() : null;
var Ol = (e = []) => {
  const { activeElement: t } = document;
  return t && !e.some((a) => a === t) ? t : null;
};
var zl = (e) => Pe(e) && e === Ol();
var Pl = (e, t = {}) => {
  try {
    e.focus(t);
  } catch (a) {
    console.error(a);
  }
  return zl(e);
};
var Nl = (e, t) => t && Pe(e) && e.getAttribute(t) || null;
var Ll = (e) => {
  if (Nl(e, "display") === "none")
    return false;
  const t = Fl(e);
  return !!(t && t.height > 0 && t.width > 0);
};
var qt = (e, t) => !e || e(t).filter((a) => a.type !== Comment).length < 1;
var Hl = (e, t) => (Pe(t) ? t : fa).querySelector(e) || null;
var El = (e, t) => Array.from([(Pe(t) ? t : fa).querySelectorAll(e)]);
var va = (e, t) => t && Pe(e) ? e.getAttribute(t) : null;
var Dl = (e, t, a) => {
  t && Pe(e) && e.setAttribute(t, a);
};
var Rl = (e, t) => {
  t && Pe(e) && e.removeAttribute(t);
};
var ql = (e, t) => Ct(e).toLowerCase() === Ct(t).toLowerCase();
var Ze = da ? window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || ((e) => setTimeout(e, 16)) : (e) => setTimeout(e, 0);
var dt = (e, t, a) => t.concat(["sm", "md", "lg", "xl", "xxl"]).reduce((l, n) => (l[e ? `${e}${n.charAt(0).toUpperCase() + n.slice(1)}` : n] = a, l), /* @__PURE__ */ Object.create(null));
var ma = (e, t, a, l = a) => Object.keys(t).reduce((n, i) => (e[i] && n.push(
  [l, i.replace(a, ""), e[i]].filter((f) => f && typeof f != "boolean").join("-").toLowerCase()
), n), []);
var Ie = (e = "") => `__BVID__${Math.random().toString().slice(2, 8)}___BV_${e}__`;
var ct = (e, t) => e === true || e === "true" || e === "" ? "true" : e === "grammar" || e === "spelling" ? e : t === false ? "true" : e === false || e === "false" ? "false" : void 0;
var Bt = (e) => !!e && typeof e == "object" && e.constructor === Object;
var wt = (e, t, a = true) => {
  const l = e instanceof Date && typeof e.getMonth == "function" ? new Date(e.getTime()) : Object.assign({}, e);
  return Bt(e) && Bt(t) && Object.keys(t).forEach((n) => {
    Bt(t[n]) ? n in e ? l[n] = wt(e[n], t[n], a) : Object.assign(l, { [n]: t[n] }) : Array.isArray(t[n]) && Array.isArray(e[n]) ? Object.assign(l, {
      [n]: a ? e[n].concat(
        t[n].filter((i) => !e[n].includes(i))
      ) : t[n]
    }) : Object.assign(l, { [n]: t[n] });
  }), l;
};
var Te = (e, t = {}, a = {}) => {
  const l = [e];
  let n;
  for (let i = 0; i < l.length && !n; i++) {
    const f = l[i];
    n = a[f];
  }
  return n && typeof n == "function" ? n(t) : n;
};
var je = (e, t = NaN) => Number.isInteger(e) ? e : t;
var We = (e, t = NaN) => {
  const a = Number.parseInt(e, 10);
  return Number.isNaN(a) ? t : a;
};
var ba = (e, t = NaN) => {
  const a = Number.parseFloat(e.toString());
  return Number.isNaN(a) ? t : a;
};
var jt = (e, t) => t + (e ? _l(e) : "");
var Ot = (e, t) => (Array.isArray(t) ? t.slice() : Object.keys(t)).reduce(
  (a, l) => (a[l] = e[l], a),
  {}
);
var jl = (e) => typeof e == "boolean" ? e : e === "" ? true : e === "true";
var Xe = (e) => !!(e.href || e.to);
function r(e) {
  return computed(() => e.value === void 0 ? void 0 : jl(e.value));
}
var ga = Symbol();
var pa = {
  items: reactive([]),
  reset() {
    this.items = reactive([]);
  }
};
var Ml = (e) => {
  e.provide(ga, pa);
};
var Gl = () => {
  const e = inject(ga);
  return e || pa;
};
var me = (e, t, a) => {
  onMounted(() => {
    var l;
    (l = e == null ? void 0 : e.value) == null || l.addEventListener(t, a);
  }), onBeforeUnmount(() => {
    var l;
    (l = e == null ? void 0 : e.value) == null || l.removeEventListener(t, a);
  });
};
var ha = (e) => computed(() => ({
  "form-check": !e.plain && !e.button,
  "form-check-inline": e.inline,
  "form-switch": e.switch,
  [`form-control-${e.size}`]: e.size && e.size !== "md"
}));
var ya = (e) => computed(() => ({
  "form-check-input": !e.plain && !e.button,
  "is-valid": e.state === true,
  "is-invalid": e.state === false,
  "btn-check": e.button
}));
var Ba = (e) => computed(() => ({
  "form-check-label": !e.plain && !e.button,
  btn: e.button,
  [`btn-${e.buttonVariant}`]: e.button,
  [`btn-${e.size}`]: e.button && e.size && e.size !== "md"
}));
var $a = (e) => computed(() => {
  var t;
  return {
    "aria-invalid": ct(e.ariaInvalid, e.state),
    "aria-required": ((t = e.required) == null ? void 0 : t.toString()) === "true" ? "true" : null
  };
});
var ka = (e) => computed(() => ({
  "was-validated": e.validated,
  "btn-group": e.buttons && !e.stacked,
  "btn-group-vertical": e.stacked,
  [`btn-group-${e.size}`]: e.size
}));
var nt = (e, t, a) => e.reduce(
  (l, n) => n.type.toString() === "Symbol(Fragment)" ? l.concat(n.children) : l.concat([n]),
  []
).filter((l) => (l.type.__name || l.type.name) === t).map((l) => {
  const n = (l.children.default ? l.children.default() : []).find(
    (i) => i.type.toString() === "Symbol(Text)"
  );
  return {
    props: {
      disabled: a,
      ...l.props
    },
    text: n ? n.children : ""
  };
});
var Sa = (e, t) => typeof e == "string" ? {
  props: {
    value: e,
    disabled: t.disabled
  },
  text: e
} : {
  props: {
    value: e[t.valueField],
    disabled: t.disabled || e[t.disabledField],
    ...e.props
  },
  text: e[t.textField],
  html: e[t.htmlField]
};
var Ca = (e, t, a, l, n) => ({
  ...e,
  props: {
    "button-variant": a.buttonVariant,
    form: a.form,
    name: l.value,
    id: `${n.value}_option_${t}`,
    button: a.buttons,
    state: a.state,
    plain: a.plain,
    size: a.size,
    inline: !a.stacked,
    required: a.required,
    ...e.props
  }
});
var ye = (e, t) => computed(() => (e == null ? void 0 : e.value) || Ie(t));
var wa = {
  ariaInvalid: {
    type: [Boolean, String],
    default: void 0
  },
  autocomplete: { type: String, required: false },
  autofocus: { type: Boolean, default: false },
  disabled: { type: Boolean, default: false },
  form: { type: String, required: false },
  formatter: { type: Function, required: false },
  id: { type: String, required: false },
  lazy: { type: Boolean, default: false },
  lazyFormatter: { type: Boolean, default: false },
  list: { type: String, required: false },
  modelValue: { type: [String, Number], default: "" },
  name: { type: String, required: false },
  number: { type: Boolean, default: false },
  placeholder: { type: String, required: false },
  plaintext: { type: Boolean, default: false },
  readonly: { type: Boolean, default: false },
  required: { type: Boolean, default: false },
  size: { type: String, required: false },
  state: { type: Boolean, default: null },
  trim: { type: Boolean, default: false }
};
var Ta = (e, t) => {
  const a = ref();
  let l = null, n = true;
  const i = ye(toRef(e, "id"), "input"), f = (y, V, $ = false) => (y = String(y), typeof e.formatter == "function" && (!e.lazyFormatter || $) ? (n = false, e.formatter(y, V)) : y), d = (y) => e.trim ? y.trim() : e.number ? Number.parseFloat(y) : y, v = () => {
    nextTick(() => {
      var y;
      e.autofocus && ((y = a.value) == null || y.focus());
    });
  };
  onMounted(v), onMounted(() => {
    a.value && (a.value.value = e.modelValue);
  }), onActivated(v);
  const b = computed(
    () => {
      var y;
      return ct(e.ariaInvalid, (y = e.state) != null ? y : void 0);
    }
  ), g = (y) => {
    const { value: V } = y.target, $ = f(V, y);
    if ($ === false || y.defaultPrevented) {
      y.preventDefault();
      return;
    }
    if (e.lazy)
      return;
    const z = d($);
    e.modelValue !== z && (l = V, t("update:modelValue", z)), t("input", $);
  }, B = (y) => {
    const { value: V } = y.target, $ = f(V, y);
    if ($ === false || y.defaultPrevented) {
      y.preventDefault();
      return;
    }
    if (!e.lazy)
      return;
    l = V, t("update:modelValue", $);
    const z = d($);
    e.modelValue !== z && t("change", $);
  }, h2 = (y) => {
    if (t("blur", y), !e.lazy && !e.lazyFormatter)
      return;
    const { value: V } = y.target, $ = f(V, y, true);
    l = V, t("update:modelValue", $);
  }, k = () => {
    var y;
    e.disabled || (y = a.value) == null || y.focus();
  }, w = () => {
    var y;
    e.disabled || (y = a.value) == null || y.blur();
  };
  return watch(
    () => e.modelValue,
    (y) => {
      !a.value || (a.value.value = l && n ? l : y, l = null, n = true);
    }
  ), {
    input: a,
    computedId: i,
    computedAriaInvalid: b,
    onInput: g,
    onChange: B,
    onBlur: h2,
    focus: k,
    blur: w
  };
};
var qe = (e, t) => {
  if (!e)
    return e;
  if (t in e)
    return e[t];
  const a = t.split(".");
  return qe(e[a[0]], a.splice(1).join("."));
};
var $t = (e, t = null, a, l) => {
  if (Object.prototype.toString.call(e) === "[object Object]") {
    const n = qe(e, l.valueField), i = qe(e, l.textField), f = qe(e, l.htmlField), d = qe(e, l.disabledField), v = e[l.optionsField] || null;
    return v !== null ? {
      label: String(qe(e, l.labelField) || i),
      options: zt(v, a, l)
    } : {
      value: typeof n > "u" ? t || i : n,
      text: String(typeof i > "u" ? t : i),
      html: f,
      disabled: Boolean(d)
    };
  }
  return {
    value: t || e,
    text: String(e),
    disabled: false
  };
};
var zt = (e, t, a) => Array.isArray(e) ? e.map((l) => $t(l, null, t, a)) : Object.prototype.toString.call(e) === "[object Object]" ? (console.warn(
  `[BootstrapVue warn]: ${t} - Setting prop "options" to an object is deprecated. Use the array format instead.`
), Object.keys(e).map((l) => {
  const n = e[l];
  switch (typeof n) {
    case "object":
      return $t(n.text, String(n.value), t, a);
    default:
      return $t(n, String(l), t, a);
  }
})) : [];
var Wl = ["id"];
var Va = Symbol();
var Ul = defineComponent({
  __name: "BAccordion",
  props: {
    flush: { default: false },
    free: { default: false },
    id: null
  },
  setup(e) {
    const t = e, a = ye(toRef(t, "id"), "accordion"), l = r(toRef(t, "flush")), n = r(toRef(t, "free")), i = computed(() => ({
      "accordion-flush": l.value
    }));
    return n.value || provide(Va, a.value.toString()), (f, d) => (openBlock(), createElementBlock("div", {
      id: unref(a),
      class: normalizeClass(["accordion", unref(i)])
    }, [
      renderSlot(f.$slots, "default")
    ], 10, Wl));
  }
});
var _a = defineComponent({
  __name: "BCollapse",
  props: {
    accordion: null,
    id: { default: Ie() },
    modelValue: { default: false },
    tag: { default: "div" },
    toggle: { default: false },
    visible: { default: false },
    isNav: { default: false }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "modelValue")), n = r(toRef(a, "toggle")), i = r(toRef(a, "visible")), f = r(toRef(a, "isNav")), d = ref(), v = ref(), b = computed(() => ({
      show: l.value,
      "navbar-collapse": f.value
    })), g = () => t("update:modelValue", false);
    return me(d, "show.bs.collapse", () => {
      t("show"), t("update:modelValue", true);
    }), me(d, "hide.bs.collapse", () => {
      t("hide"), t("update:modelValue", false);
    }), me(d, "shown.bs.collapse", () => t("shown")), me(d, "hidden.bs.collapse", () => t("hidden")), onMounted(() => {
      var B;
      v.value = new Collapse(d.value, {
        parent: a.accordion ? `#${a.accordion}` : void 0,
        toggle: n.value
      }), (i.value || l.value) && (t("update:modelValue", true), (B = v.value) == null || B.show());
    }), watch(
      () => l.value,
      (B) => {
        var h2, k;
        B ? (h2 = v.value) == null || h2.show() : (k = v.value) == null || k.hide();
      }
    ), watch(
      () => i.value,
      (B) => {
        var h2, k;
        B ? (t("update:modelValue", !!B), (h2 = v.value) == null || h2.show()) : (t("update:modelValue", !!B), (k = v.value) == null || k.hide());
      }
    ), (B, h2) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      ref_key: "element",
      ref: d,
      class: normalizeClass(["collapse", unref(b)]),
      "data-bs-parent": e.accordion || null,
      "is-nav": unref(f)
    }, {
      default: withCtx(() => [
        renderSlot(B.$slots, "default", {
          visible: unref(l),
          close: g
        })
      ]),
      _: 3
    }, 8, ["id", "class", "data-bs-parent", "is-nav"]));
  }
});
var Xl = {
  mounted(e, t) {
    let a = t.value;
    Object.keys(t.modifiers).length > 0 && ([a] = Object.keys(t.modifiers)), e.setAttribute("data-bs-toggle", "modal"), e.setAttribute("data-bs-target", `#${a}`);
  }
};
var Kl = {
  mounted(e, t) {
    let a = "right";
    const l = [];
    t.modifiers.left ? a = "left" : t.modifiers.right ? a = "right" : t.modifiers.bottom ? a = "bottom" : t.modifiers.top && (a = "top"), t.modifiers.manual ? l.push("manual") : (t.modifiers.click && l.push("click"), t.modifiers.hover && l.push("hover"), t.modifiers.focus && l.push("focus")), e.setAttribute("data-bs-toggle", "popover"), new Popover(e, {
      trigger: l.length === 0 ? "click" : l.join(" "),
      placement: a,
      content: t.value
    });
  },
  unmounted(e) {
    const t = Popover.getInstance(e);
    t == null || t.dispose();
  }
};
var Jl = (e) => {
  if (e.classList.contains("offcanvas"))
    return "offcanvas";
  if (e.classList.contains("collapse"))
    return "collapse";
  throw Error("Couldn't resolve toggle type");
};
var Yl = (e, t) => {
  const { modifiers: a, arg: l, value: n } = e, i = Object.keys(a || {}), f = typeof n == "string" ? n.split(Qe) : n;
  if (ql(t.tagName, "a")) {
    const d = va(t, "href") || "";
    Vl.test(d) && i.push(d.replace(Tl, ""));
  }
  return Array.prototype.concat.apply([], [l, f]).forEach((d) => typeof d == "string" && i.push(d)), i.filter((d, v, b) => d && b.indexOf(d) === v);
};
var Pt = {
  mounted(e, t) {
    const a = Yl(t, e), l = [];
    let n = "data-bs-target";
    e.tagName === "a" && (n = "href");
    for (let i = 0; i < a.length; i++) {
      const f = a[i], d = document.getElementById(f);
      d && (e.setAttribute("data-bs-toggle", Jl(d)), l.push(`#${f}`));
    }
    l.length > 0 && e.setAttribute(n, l.join(","));
  }
};
var Zl = (e, t) => {
  if (t != null && t.trigger)
    return t.trigger;
  if (e.manual)
    return "manual";
  const a = [];
  return e.click && a.push("click"), e.hover && a.push("hover"), e.focus && a.push("focus"), a.length > 0 ? a.join(" ") : "hover focus";
};
var Ql = (e, t) => t != null && t.placement ? t.placement : e.left ? "left" : e.right ? "right" : e.bottom ? "bottom" : "top";
var en = (e) => e != null && e.delay ? e.delay : 0;
var Mt = (e) => typeof e == "object" ? e == null ? void 0 : e.title : e;
var tn = {
  beforeMount(e, t) {
    e.setAttribute("data-bs-toggle", "tooltip"), e.getAttribute("title") || e.setAttribute("title", Mt(t.value).toString());
    const a = /<("[^"]*"|'[^']*'|[^'">])*>/.test(e.title), l = Zl(t.modifiers, t.value), n = Ql(t.modifiers, t.value), i = en(t.value), f = e.getAttribute("title");
    new Tooltip(e, {
      trigger: l,
      placement: n,
      delay: i,
      html: a
    }), f && e.setAttribute("data-bs-original-title", f);
  },
  updated(e, t) {
    e.getAttribute("title") || e.setAttribute("title", Mt(t.value).toString());
    const a = e.getAttribute("title"), l = e.getAttribute("data-bs-original-title"), n = Tooltip.getInstance(e);
    e.removeAttribute("title"), a && a !== l && (n == null || n.setContent({ ".tooltip-inner": a }), e.setAttribute("data-bs-original-title", a));
  },
  unmounted(e) {
    const t = Tooltip.getInstance(e);
    t == null || t.dispose();
  }
};
var et = /* @__PURE__ */ new Map();
var Aa = (e) => {
  if (et.has(e)) {
    const t = et.get(e);
    t && t.stop && t.stop(), et.delete(e);
  }
};
var Gt = (e, t) => {
  const a = {
    margin: "0px",
    once: false,
    callback: t.value
  };
  Object.keys(t.modifiers).forEach((n) => {
    Number.isInteger(n) ? a.margin = `${n}px` : n.toLowerCase() === "once" && (a.once = true);
  }), Aa(e);
  const l = new ln(
    e,
    a.margin,
    a.once,
    a.callback,
    t.instance
  );
  et.set(e, l);
};
var an = {
  beforeMount(e, t) {
    Gt(e, t);
  },
  updated(e, t) {
    Gt(e, t);
  },
  unmounted(e) {
    Aa(e);
  }
};
var ln = class {
  constructor(t, a, l, n, i) {
    ve(this, "element");
    ve(this, "margin");
    ve(this, "once");
    ve(this, "callback");
    ve(this, "instance");
    ve(this, "observer");
    ve(this, "doneOnce");
    ve(this, "visible");
    this.element = t, this.margin = a, this.once = l, this.callback = n, this.instance = i, this.createObserver();
  }
  createObserver() {
    if (this.observer && this.stop(), !(this.doneOnce || typeof this.callback != "function")) {
      try {
        this.observer = new IntersectionObserver(this.handler.bind(this), {
          root: null,
          rootMargin: this.margin,
          threshold: 0
        });
      } catch {
        console.error("Intersection Observer not supported"), this.doneOnce = true, this.observer = void 0, this.callback(null);
        return;
      }
      this.instance.$nextTick(() => {
        this.observer && this.observer.observe(this.element);
      });
    }
  }
  handler(t) {
    const [a] = t, l = Boolean(a.isIntersecting || a.intersectionRatio > 0);
    l !== this.visible && (this.visible = l, this.callback(l), this.once && this.visible && (this.doneOnce = true, this.stop()));
  }
  stop() {
    this.observer && this.observer.disconnect(), this.observer = null;
  }
};
var nn = {
  mounted(e, t) {
    t.value !== false && e.focus();
  }
};
var on = {
  BModal: Xl,
  BPopover: Kl,
  BToggle: Pt,
  BTooltip: tn,
  BVisible: an,
  focus: nn
};
var sn = { class: "accordion-item" };
var rn = ["id"];
var un = ["aria-expanded", "aria-controls"];
var dn = { class: "accordion-body" };
var cn = defineComponent({
  __name: "BAccordionItem",
  props: {
    id: null,
    title: null,
    visible: { default: false }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "visible")), l = ye(toRef(t, "id"), "accordion_item"), n = inject(Va, "");
    return (i, f) => (openBlock(), createElementBlock("div", sn, [
      createBaseVNode("h2", {
        id: `${unref(l)}heading`,
        class: "accordion-header"
      }, [
        withDirectives((openBlock(), createElementBlock("button", {
          class: normalizeClass(["accordion-button", { collapsed: !unref(a) }]),
          type: "button",
          "aria-expanded": unref(a) ? "true" : "false",
          "aria-controls": unref(l)
        }, [
          renderSlot(i.$slots, "title", {}, () => [
            createTextVNode(toDisplayString(e.title), 1)
          ])
        ], 10, un)), [
          [unref(Pt), void 0, unref(l)]
        ])
      ], 8, rn),
      createVNode(_a, {
        id: unref(l),
        class: "accordion-collapse",
        visible: unref(a),
        accordion: unref(n),
        "aria-labelledby": `heading${unref(l)}`
      }, {
        default: withCtx(() => [
          createBaseVNode("div", dn, [
            renderSlot(i.$slots, "default")
          ])
        ]),
        _: 3
      }, 8, ["id", "visible", "accordion", "aria-labelledby"])
    ]));
  }
});
var fn = ["type", "disabled", "aria-label"];
var Ge = defineComponent({
  __name: "BCloseButton",
  props: {
    ariaLabel: { default: "Close" },
    disabled: { default: false },
    white: { default: false },
    type: { default: "button" }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "disabled")), n = r(toRef(a, "white")), i = computed(() => ({
      "btn-close-white": n.value
    }));
    return (f, d) => (openBlock(), createElementBlock("button", {
      type: e.type,
      class: normalizeClass(["btn-close", unref(i)]),
      disabled: unref(l),
      "aria-label": e.ariaLabel,
      onClick: d[0] || (d[0] = (v) => t("click", v))
    }, null, 10, fn));
  }
});
var vn = defineComponent({
  __name: "BAlert",
  props: {
    dismissLabel: { default: "Close" },
    dismissible: { default: false },
    fade: { default: false },
    modelValue: { type: [Boolean, Number], default: false },
    show: { default: false },
    variant: { default: "info" }
  },
  emits: ["closed", "close-count-down", "update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "dismissible"));
    r(toRef(a, "fade"));
    const n = r(toRef(a, "show")), i = ref(null), f = ref(), d = computed(() => ({
      [`alert-${a.variant}`]: !!a.variant,
      show: !!a.modelValue,
      "alert-dismissible": l.value,
      fade: !!a.modelValue
    }));
    let v;
    const b = (V) => {
      if (typeof V == "boolean")
        return 0;
      const $ = je(V, 0);
      return $ > 0 ? $ : 0;
    }, g = () => {
      v !== void 0 && (clearTimeout(v), v = void 0);
    }, B = ref(b(a.modelValue)), h2 = computed(() => !!a.modelValue || n.value);
    onBeforeUnmount(() => {
      var V;
      g(), (V = f.value) == null || V.dispose(), f.value = void 0;
    });
    const k = computed(() => a.modelValue === true ? true : a.modelValue === false || je(a.modelValue, 0) < 1 ? false : !!a.modelValue), w = () => {
      B.value = b(a.modelValue), (k.value || n.value) && !f.value && (f.value = new Alert(i.value));
    }, y = () => {
      typeof a.modelValue == "boolean" ? t("update:modelValue", false) : t("update:modelValue", 0), t("closed");
    };
    return watch(() => a.modelValue, w), watch(() => n.value, w), watch(B, (V) => {
      g(), typeof a.modelValue != "boolean" && (t("close-count-down", V), V === 0 && a.modelValue > 0 && t("closed"), a.modelValue !== V && t("update:modelValue", V), V > 0 && (v = setTimeout(() => {
        B.value--;
      }, 1e3)));
    }), (V, $) => unref(h2) ? (openBlock(), createElementBlock("div", {
      key: 0,
      ref_key: "element",
      ref: i,
      class: normalizeClass(["alert", unref(d)]),
      role: "alert"
    }, [
      renderSlot(V.$slots, "default"),
      unref(l) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        V.$slots.close ? (openBlock(), createElementBlock("button", {
          key: 0,
          type: "button",
          "data-bs-dismiss": "alert",
          onClick: y
        }, [
          renderSlot(V.$slots, "close")
        ])) : (openBlock(), createBlock(Ge, {
          key: 1,
          "aria-label": e.dismissLabel,
          "data-bs-dismiss": "alert",
          onClick: y
        }, null, 8, ["aria-label"]))
      ], 64)) : createCommentVNode("", true)
    ], 2)) : createCommentVNode("", true);
  }
});
var xa = Symbol();
var mn = defineComponent({
  __name: "BAvatarGroup",
  props: {
    overlap: { default: 0.3 },
    rounded: { type: [Boolean, String], default: false },
    size: null,
    square: { default: false },
    tag: { default: "div" },
    variant: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "square")), l = computed(() => Tt(t.size)), n = (d) => typeof d == "string" && ra(d) ? ba(d, 0) : d || 0, i = computed(
      () => Math.min(Math.max(n(t.overlap), 0), 1) / 2
    ), f = computed(() => {
      const d = l.value ? `calc(${l.value} * ${i.value})` : null;
      return d ? { paddingLeft: d, paddingRight: d } : {};
    });
    return provide(xa, {
      overlapScale: i,
      size: t.size,
      square: a.value,
      rounded: t.rounded,
      variant: t.variant
    }), (d, v) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: "b-avatar-group",
      role: "group"
    }, {
      default: withCtx(() => [
        createBaseVNode("div", {
          class: "b-avatar-group-inner",
          style: normalizeStyle(unref(f))
        }, [
          renderSlot(d.$slots, "default")
        ], 4)
      ]),
      _: 3
    }));
  }
});
var bn = {
  key: 0,
  class: "b-avatar-custom"
};
var gn = {
  key: 1,
  class: "b-avatar-img"
};
var pn = ["src", "alt"];
var Tt = (e) => {
  const t = typeof e == "string" && ra(e) ? ba(e, 0) : e;
  return typeof t == "number" ? `${t}px` : t || null;
};
var hn = defineComponent({
  __name: "BAvatar",
  props: {
    alt: { default: "avatar" },
    ariaLabel: null,
    badge: { type: [Boolean, String], default: false },
    badgeLeft: { default: false },
    badgeOffset: null,
    badgeTop: { default: false },
    badgeVariant: { default: "primary" },
    button: { default: false },
    buttonType: { default: "button" },
    disabled: { default: false },
    icon: null,
    rounded: { type: [Boolean, String], default: "circle" },
    size: null,
    square: { default: false },
    src: null,
    text: null,
    textVariant: { default: void 0 },
    variant: { default: "secondary" }
  },
  emits: ["click", "img-error"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "badgeLeft")), n = r(toRef(a, "badgeTop")), i = r(toRef(a, "button")), f = r(toRef(a, "disabled")), d = r(toRef(a, "square")), v = useSlots(), b = ["sm", null, "lg"], g = 0.4, B = g * 0.7, h2 = inject(xa, null), k = (Q) => {
      const Z = Q;
      return Z === "light" || Z === "warning" ? "dark" : "light";
    }, w = computed(() => !qt(v.default)), y = computed(() => !qt(v.badge)), V = computed(
      () => a.badge || a.badge === "" || y.value
    ), $ = computed(
      () => h2 != null && h2.size ? h2.size : Tt(a.size)
    ), z = computed(
      () => h2 != null && h2.variant ? h2.variant : a.variant
    ), L = computed(
      () => h2 != null && h2.rounded ? h2.rounded : a.rounded
    ), S = computed(() => ({
      type: i.value ? a.buttonType : void 0,
      "aria-label": a.ariaLabel || null,
      disabled: f.value || null
    })), A = computed(() => ({
      [`bg-${a.badgeVariant}`]: !!a.badgeVariant
    })), I = computed(() => a.badge === true ? "" : a.badge), M = computed(() => `text-${k(a.badgeVariant)}`), _ = computed(() => ({
      [`b-avatar-${a.size}`]: !!a.size && b.indexOf(Tt(a.size)) !== -1,
      [`bg-${z.value}`]: !!z.value,
      badge: !i.value && z.value && w.value,
      rounded: L.value === "" || L.value === true,
      ["rounded-circle"]: !d.value && L.value === "circle",
      ["rounded-0"]: d.value || L.value === "0",
      ["rounded-1"]: !d.value && L.value === "sm",
      ["rounded-3"]: !d.value && L.value === "lg",
      ["rounded-top"]: !d.value && L.value === "top",
      ["rounded-bottom"]: !d.value && L.value === "bottom",
      ["rounded-start"]: !d.value && L.value === "left",
      ["rounded-end"]: !d.value && L.value === "right",
      btn: i.value,
      [`btn-${z.value}`]: i.value ? !!z.value : false
    })), T = computed(() => `text-${a.textVariant || k(z.value)}`), D = computed(() => {
      const Q = a.badgeOffset || "0px";
      return {
        fontSize: (b.indexOf($.value || null) === -1 ? `calc(${$.value} * ${B})` : "") || "",
        top: n.value ? Q : "",
        bottom: n.value ? "" : Q,
        left: l.value ? Q : "",
        right: l.value ? "" : Q
      };
    }), q = computed(() => {
      const Q = b.indexOf($.value || null) === -1 ? `calc(${$.value} * ${g})` : null;
      return Q ? { fontSize: Q } : {};
    }), le = computed(() => {
      var Se;
      const Q = ((Se = h2 == null ? void 0 : h2.overlapScale) == null ? void 0 : Se.value) || 0, Z = $.value && Q ? `calc(${$.value} * -${Q})` : null;
      return Z ? { marginLeft: Z, marginRight: Z } : {};
    }), te = computed(() => i.value ? "button" : "span"), K = computed(() => ({
      ...le.value,
      width: $.value,
      height: $.value
    })), de = (Q) => {
      !f.value && i.value && t("click", Q);
    }, se = (Q) => t("img-error", Q);
    return (Q, Z) => (openBlock(), createBlock(resolveDynamicComponent(unref(te)), mergeProps({
      class: ["b-avatar", unref(_)],
      style: unref(K)
    }, unref(S), { onClick: de }), {
      default: withCtx(() => [
        unref(w) ? (openBlock(), createElementBlock("span", bn, [
          renderSlot(Q.$slots, "default")
        ])) : e.src ? (openBlock(), createElementBlock("span", gn, [
          createBaseVNode("img", {
            src: e.src,
            alt: e.alt,
            onError: se
          }, null, 40, pn)
        ])) : e.text ? (openBlock(), createElementBlock("span", {
          key: 2,
          class: normalizeClass(["b-avatar-text", unref(T)]),
          style: normalizeStyle(unref(q))
        }, toDisplayString(e.text), 7)) : createCommentVNode("", true),
        unref(V) ? (openBlock(), createElementBlock("span", {
          key: 3,
          class: normalizeClass(["b-avatar-badge", unref(A)]),
          style: normalizeStyle(unref(D))
        }, [
          unref(y) ? renderSlot(Q.$slots, "badge", { key: 0 }) : (openBlock(), createElementBlock("span", {
            key: 1,
            class: normalizeClass(unref(M))
          }, toDisplayString(unref(I)), 3))
        ], 6)) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16, ["class", "style"]));
  }
});
var De = {
  active: { type: [Boolean, String], default: false },
  activeClass: { type: String, default: "router-link-active" },
  append: { type: [Boolean, String], default: false },
  disabled: { type: [Boolean, String], default: false },
  event: { type: [String, Array], default: "click" },
  exact: { type: [Boolean, String], default: false },
  exactActiveClass: { type: String, default: "router-link-exact-active" },
  href: { type: String },
  rel: { type: String, default: null },
  replace: { type: [Boolean, String], default: false },
  routerComponentName: { type: String, default: "router-link" },
  routerTag: { type: String, default: "a" },
  target: { type: String, default: "_self" },
  to: { type: [String, Object], default: null }
};
var yn = defineComponent({
  props: De,
  emits: ["click"],
  setup(e, { emit: t, attrs: a }) {
    const l = r(toRef(e, "active")), n = r(toRef(e, "append")), i = r(toRef(e, "disabled")), f = r(toRef(e, "exact")), d = r(toRef(e, "replace")), v = getCurrentInstance(), b = ref(null), g = computed(() => {
      const w = e.routerComponentName.split("-").map((V) => V.charAt(0).toUpperCase() + V.slice(1)).join("");
      return !((v == null ? void 0 : v.appContext.app.component(w)) !== void 0) || i.value || !e.to ? "a" : e.routerComponentName;
    }), B = computed(() => {
      const w = "#";
      if (e.href)
        return e.href;
      if (typeof e.to == "string")
        return e.to || w;
      const y = e.to;
      if (Object.prototype.toString.call(y) === "[object Object]" && (y.path || y.query || y.hash)) {
        const V = y.path || "", $ = y.query ? `?${Object.keys(y.query).map((L) => `${L}=${y.query[L]}`).join("=")}` : "", z = !y.hash || y.hash.charAt(0) === "#" ? y.hash || "" : `#${y.hash}`;
        return `${V}${$}${z}` || w;
      }
      return w;
    }), h2 = computed(() => ({
      to: e.to,
      href: B.value,
      target: e.target,
      rel: e.target === "_blank" && e.rel === null ? "noopener" : e.rel || null,
      tabindex: i.value ? "-1" : typeof a.tabindex > "u" ? null : a.tabindex,
      "aria-disabled": i.value ? "true" : null
    }));
    return {
      tag: g,
      routerAttr: h2,
      link: b,
      clicked: (w) => {
        if (i.value) {
          w.preventDefault(), w.stopImmediatePropagation();
          return;
        }
        t("click", w);
      },
      activeBoolean: l,
      appendBoolean: n,
      disabledBoolean: i,
      replaceBoolean: d,
      exactBoolean: f
    };
  }
});
var ke = (e, t) => {
  const a = e.__vccOpts || e;
  for (const [l, n] of t)
    a[l] = n;
  return a;
};
function Bn(e, t, a, l, n, i) {
  return e.tag === "router-link" ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({ key: 0 }, e.routerAttr, { custom: "" }), {
    default: withCtx(({ href: f, navigate: d, isActive: v, isExactActive: b }) => [
      (openBlock(), createBlock(resolveDynamicComponent(e.routerTag), mergeProps({
        ref: "link",
        href: f,
        class: [
          (v || e.activeBoolean) && e.activeClass,
          (b || e.exactBoolean) && e.exactActiveClass
        ]
      }, e.$attrs, { onClick: d }), {
        default: withCtx(() => [
          renderSlot(e.$slots, "default")
        ]),
        _: 2
      }, 1040, ["href", "class", "onClick"]))
    ]),
    _: 3
  }, 16)) : (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
    key: 1,
    ref: "link",
    class: { active: e.activeBoolean, disabled: e.disabledBoolean }
  }, e.routerAttr, { onClick: e.clicked }), {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 16, ["class", "onClick"]));
}
var Ce = ke(yn, [["render", Bn]]);
var Wt = it(De, ["event", "routerTag"]);
var $n = defineComponent({
  components: { BLink: Ce },
  props: {
    pill: { type: [Boolean, String], default: false },
    tag: { type: String, default: "span" },
    variant: { type: String, default: "secondary" },
    textIndicator: { type: [Boolean, String], default: false },
    dotIndicator: { type: [Boolean, String], default: false },
    ...Wt
  },
  setup(e) {
    const t = computed(() => Xe(e)), a = computed(() => t.value ? Ce : e.tag), l = r(toRef(e, "pill")), n = r(toRef(e, "textIndicator")), i = r(toRef(e, "dotIndicator"));
    return {
      classes: computed(() => ({
        [`bg-${e.variant}`]: e.variant,
        active: e.active,
        disabled: e.disabled,
        "text-dark": ["warning", "info", "light"].includes(e.variant),
        "rounded-pill": l.value,
        "position-absolute top-0 start-100 translate-middle": n.value || i.value,
        "p-2 border border-light rounded-circle": i.value,
        "text-decoration-none": t.value
      })),
      props: t.value ? Ot(e, Wt) : {},
      computedTag: a
    };
  }
});
function kn(e, t, a, l, n, i) {
  return openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({
    class: ["badge", e.classes]
  }, e.props), {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 16, ["class"]);
}
var Sn = ke($n, [["render", kn]]);
var Ut = it(De, ["event", "routerTag"]);
var Cn = defineComponent({
  components: { BLink: Ce },
  props: {
    ...Ut,
    active: { type: [Boolean, String], default: false },
    ariaCurrent: { type: String, default: "location" },
    disabled: { type: [Boolean, String], default: false },
    text: { type: String, required: false }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = r(toRef(e, "active")), l = r(toRef(e, "disabled")), n = computed(() => ({
      active: a.value
    })), i = computed(
      () => a.value ? "span" : Ce
    ), f = computed(
      () => a.value ? e.ariaCurrent : void 0
    ), d = (v) => {
      if (l.value || a.value) {
        v.preventDefault(), v.stopImmediatePropagation();
        return;
      }
      l.value || t("click", v);
    };
    return {
      props: i.value !== "span" ? Ot(e, Ut) : {},
      liClasses: n,
      computedTag: i,
      computedAriaCurrent: f,
      clicked: d
    };
  }
});
function wn(e, t, a, l, n, i) {
  return openBlock(), createElementBlock("li", {
    class: normalizeClass(["breadcrumb-item", e.liClasses])
  }, [
    (openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({ "aria-current": e.computedAriaCurrent }, e.props, { onClick: e.clicked }), {
      default: withCtx(() => [
        renderSlot(e.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16, ["aria-current", "onClick"]))
  ], 2);
}
var Ia = ke(Cn, [["render", wn]]);
var Tn = { "aria-label": "breadcrumb" };
var Vn = { class: "breadcrumb" };
var _n = defineComponent({
  __name: "BBreadcrumb",
  props: {
    items: null
  },
  setup(e) {
    const t = e, a = Gl(), l = computed(() => {
      const n = t.items || (a == null ? void 0 : a.items) || [];
      let i = false;
      return n.map((d, v) => (typeof d == "string" && (d = { text: d }, v < n.length - 1 && (d.href = "#")), d.active && (i = true), !d.active && !i && (d.active = v + 1 === n.length), d));
    });
    return (n, i) => (openBlock(), createElementBlock("nav", Tn, [
      createBaseVNode("ol", Vn, [
        renderSlot(n.$slots, "prepend"),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l), (f, d) => (openBlock(), createBlock(Ia, mergeProps({ key: d }, f), {
          default: withCtx(() => [
            createTextVNode(toDisplayString(f.text), 1)
          ]),
          _: 2
        }, 1040))), 128)),
        renderSlot(n.$slots, "default"),
        renderSlot(n.$slots, "append")
      ])
    ]));
  }
});
var An = {
  key: 0,
  class: "visually-hidden"
};
var ft = defineComponent({
  __name: "BSpinner",
  props: {
    label: null,
    role: { default: "status" },
    small: { default: false },
    tag: { default: "span" },
    type: { default: "border" },
    variant: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "small")), l = computed(() => ({
      "spinner-border": t.type === "border",
      "spinner-border-sm": t.type === "border" && a.value,
      "spinner-grow": t.type === "grow",
      "spinner-grow-sm": t.type === "grow" && a.value,
      [`text-${t.variant}`]: t.variant !== void 0
    }));
    return (n, i) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(l)),
      role: e.label || n.$slots.label ? e.role : null,
      "aria-hidden": e.label || n.$slots.label ? null : true
    }, {
      default: withCtx(() => [
        e.label || n.$slots.label ? (openBlock(), createElementBlock("span", An, [
          renderSlot(n.$slots, "label", {}, () => [
            createTextVNode(toDisplayString(e.label), 1)
          ])
        ])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["class", "role", "aria-hidden"]));
  }
});
var xn = defineComponent({
  components: { BLink: Ce, BSpinner: ft },
  props: {
    ...De,
    active: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    href: { type: String, required: false },
    pill: { type: [Boolean, String], default: false },
    pressed: { type: [Boolean, String], default: false },
    rel: { type: String, default: void 0 },
    size: { type: String, default: "md" },
    squared: { type: [Boolean, String], default: false },
    tag: { type: String, default: "button" },
    target: { type: String, default: "_self" },
    type: { type: String, default: "button" },
    variant: { type: String, default: "secondary" },
    loading: { type: [Boolean, String], default: false },
    loadingMode: { type: String, default: "inline" }
  },
  emits: ["click", "update:pressed"],
  setup(e, { emit: t }) {
    const a = r(toRef(e, "active")), l = r(toRef(e, "disabled")), n = r(toRef(e, "pill")), i = r(toRef(e, "pressed")), f = r(toRef(e, "squared")), d = r(toRef(e, "loading")), v = computed(() => i.value === true), b = computed(
      () => e.tag === "button" && e.href === void 0 && e.to === null
    ), g = computed(() => Xe(e)), B = computed(() => e.to !== null), h2 = computed(
      () => e.href !== void 0 ? false : !b.value
    ), k = computed(() => ({
      [`btn-${e.variant}`]: !!e.variant,
      [`btn-${e.size}`]: !!e.size,
      active: a.value || i.value,
      "rounded-pill": n.value,
      "rounded-0": f.value,
      disabled: l.value
    })), w = computed(() => ({
      "aria-disabled": h2.value ? l.value : null,
      "aria-pressed": v.value ? i.value : null,
      autocomplete: v.value ? "off" : null,
      disabled: b.value ? l.value : null,
      href: e.href,
      rel: g.value ? e.rel : null,
      role: h2.value || g.value ? "button" : null,
      target: g.value ? e.target : null,
      type: b.value ? e.type : null,
      to: b.value ? null : e.to,
      append: g.value ? e.append : null,
      activeClass: B.value ? e.activeClass : null,
      event: B.value ? e.event : null,
      exact: B.value ? e.exact : null,
      exactActiveClass: B.value ? e.exactActiveClass : null,
      replace: B.value ? e.replace : null,
      routerComponentName: B.value ? e.routerComponentName : null,
      routerTag: B.value ? e.routerTag : null
    })), y = computed(
      () => B.value ? Ce : e.href ? "a" : e.tag
    );
    return {
      classes: k,
      attrs: w,
      computedTag: y,
      clicked: ($) => {
        if (l.value) {
          $.preventDefault(), $.stopPropagation();
          return;
        }
        t("click", $), v.value && t("update:pressed", !i.value);
      },
      loadingBoolean: d
    };
  }
});
function In(e, t, a, l, n, i) {
  const f = resolveComponent("b-spinner");
  return openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({
    class: ["btn", e.classes]
  }, e.attrs, { onClick: e.clicked }), {
    default: withCtx(() => [
      e.loadingBoolean ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["btn-loading", { "mode-fill": e.loadingMode === "fill", "mode-inline": e.loadingMode === "inline" }])
      }, [
        renderSlot(e.$slots, "loading", {}, () => [
          createVNode(f, {
            class: "btn-spinner",
            small: e.size !== "lg"
          }, null, 8, ["small"])
        ])
      ], 2)) : createCommentVNode("", true),
      createBaseVNode("div", {
        class: normalizeClass(["btn-content", { "btn-loading-fill": e.loadingBoolean && e.loadingMode === "fill" }])
      }, [
        renderSlot(e.$slots, "default")
      ], 2)
    ]),
    _: 3
  }, 16, ["class", "onClick"]);
}
var Ke = ke(xn, [["render", In]]);
var Fn = defineComponent({
  __name: "BButtonGroup",
  props: {
    ariaLabel: { default: "Group" },
    size: null,
    tag: { default: "div" },
    vertical: { default: false }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "vertical")), l = computed(() => ({
      "btn-group": !a.value && t.size === void 0,
      [`btn-group-${t.size}`]: t.size !== void 0,
      "btn-group-vertical": a.value
    }));
    return (n, i) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(l)),
      role: "group",
      "aria-label": e.ariaLabel
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "aria-label"]));
  }
});
var On = ["role", "aria-label"];
var zn = defineComponent({
  __name: "BButtonToolbar",
  props: {
    ariaLabel: { default: "Group" },
    justify: { default: false },
    role: { default: "toolbar" }
  },
  setup(e) {
    const a = r(toRef(e, "justify")), l = computed(() => ({
      "justify-content-between": a.value
    }));
    return (n, i) => (openBlock(), createElementBlock("div", {
      class: normalizeClass([unref(l), "btn-toolbar"]),
      role: e.role,
      "aria-label": e.ariaLabel
    }, [
      renderSlot(n.$slots, "default")
    ], 10, On));
  }
});
var Nt = defineComponent({
  __name: "BImg",
  props: {
    alt: null,
    blank: { default: false },
    blankColor: { default: "transparent" },
    block: { default: false },
    center: { default: false },
    fluid: { default: false },
    lazy: { default: false },
    fluidGrow: { default: false },
    height: null,
    left: { default: false },
    start: { default: false },
    right: { default: false },
    end: { default: false },
    rounded: { type: [Boolean, String], default: false },
    sizes: null,
    src: null,
    srcset: null,
    thumbnail: { default: false },
    width: null
  },
  emits: ["load"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "lazy")), n = r(toRef(a, "blank")), i = r(toRef(a, "block")), f = r(toRef(a, "center")), d = r(toRef(a, "fluid")), v = r(toRef(a, "fluidGrow")), b = r(toRef(a, "left")), g = r(toRef(a, "start")), B = r(toRef(a, "right")), h2 = r(toRef(a, "end")), k = r(toRef(a, "thumbnail")), w = '<svg width="%{w}" height="%{h}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 %{w} %{h}" preserveAspectRatio="none"><rect width="100%" height="100%" style="fill:%{f};"></rect></svg>', y = (M, _, T) => `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(
      w.replace("%{w}", String(M)).replace("%{h}", String(_)).replace("%{f}", T)
    )}`, V = computed(
      () => typeof a.srcset == "string" ? a.srcset.split(",").filter((M) => M).join(",") : Array.isArray(a.srcset) ? a.srcset.filter((M) => M).join(",") : void 0
    ), $ = computed(
      () => typeof a.sizes == "string" ? a.sizes.split(",").filter((M) => M).join(",") : Array.isArray(a.sizes) ? a.sizes.filter((M) => M).join(",") : void 0
    ), z = computed(() => {
      const M = (D) => D === void 0 ? void 0 : typeof D == "number" ? D : Number.parseInt(D, 10) || void 0, _ = M(a.width), T = M(a.height);
      if (n.value) {
        if (_ !== void 0 && T === void 0)
          return { height: _, width: _ };
        if (_ === void 0 && T !== void 0)
          return { height: T, width: T };
        if (_ === void 0 && T === void 0)
          return { height: 1, width: 1 };
      }
      return {
        width: _,
        height: T
      };
    }), L = computed(
      () => y(z.value.width, z.value.height, a.blankColor)
    ), S = computed(() => ({
      src: n.value ? L.value : a.src,
      alt: a.alt,
      width: z.value.width || void 0,
      height: z.value.height || void 0,
      srcset: n.value ? void 0 : V.value,
      sizes: n.value ? void 0 : $.value,
      loading: l.value ? "lazy" : "eager"
    })), A = computed(
      () => b.value || g.value ? "float-start" : B.value || h2.value ? "float-end" : f.value ? "mx-auto" : void 0
    ), I = computed(() => ({
      "img-thumbnail": k.value,
      "img-fluid": d.value || v.value,
      "w-100": v.value,
      rounded: a.rounded === "" || a.rounded === true,
      [`rounded-${a.rounded}`]: typeof a.rounded == "string" && a.rounded !== "",
      [`${A.value}`]: A.value !== void 0,
      "d-block": i.value || f.value
    }));
    return (M, _) => (openBlock(), createElementBlock("img", mergeProps({ class: unref(I) }, unref(S), {
      onLoad: _[0] || (_[0] = (T) => t("load", T))
    }), null, 16));
  }
});
var ot = defineComponent({
  __name: "BCardImg",
  props: {
    alt: null,
    blank: { default: false },
    blankColor: null,
    bottom: { default: false },
    lazy: { default: false },
    height: null,
    left: { default: false },
    start: { default: false },
    right: { default: false },
    end: { default: false },
    sizes: null,
    src: null,
    srcset: null,
    top: { default: false },
    width: null
  },
  emits: ["load"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "bottom")), n = r(toRef(a, "end")), i = r(toRef(a, "left")), f = r(toRef(a, "right")), d = r(toRef(a, "start")), v = r(toRef(a, "top")), b = computed(
      () => v.value ? "card-img-top" : f.value || n.value ? "card-img-right" : l.value ? "card-img-bottom" : i.value || d.value ? "card-img-left" : "card-img"
    ), g = computed(() => ({
      alt: a.alt,
      height: a.height,
      src: a.src,
      lazy: a.lazy,
      width: a.width,
      blank: a.blank,
      blankColor: a.blankColor,
      sizes: a.sizes,
      srcset: a.srcset
    })), B = computed(() => [b.value]);
    return (h2, k) => (openBlock(), createBlock(Nt, mergeProps({ class: unref(B) }, unref(g), {
      onLoad: k[0] || (k[0] = (w) => t("load", w))
    }), null, 16, ["class"]));
  }
});
var Pn = ["innerHTML"];
var Fa = defineComponent({
  __name: "BCardHeadFoot",
  props: {
    text: null,
    bgVariant: null,
    borderVariant: null,
    html: null,
    tag: { default: "div" },
    textVariant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`text-${t.textVariant}`]: t.textVariant !== void 0,
      [`bg-${t.bgVariant}`]: t.bgVariant !== void 0,
      [`border-${t.borderVariant}`]: t.borderVariant !== void 0
    }));
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(a))
    }, {
      default: withCtx(() => [
        e.html ? (openBlock(), createElementBlock("div", {
          key: 0,
          innerHTML: e.html
        }, null, 8, Pn)) : renderSlot(l.$slots, "default", { key: 1 }, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Oa = defineComponent({
  __name: "BCardHeader",
  props: {
    text: null,
    bgVariant: null,
    borderVariant: null,
    html: null,
    tag: { default: "div" },
    textVariant: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(Fa, mergeProps({ class: "card-header" }, t.$props), {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var za = defineComponent({
  __name: "BCardTitle",
  props: {
    text: null,
    tag: { default: "h4" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "card-title" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var Pa = defineComponent({
  __name: "BCardSubtitle",
  props: {
    text: null,
    tag: { default: "h6" },
    textVariant: { default: "muted" }
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`text-${t.textVariant}`]: !!t.textVariant
    }));
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["card-subtitle mb-2", unref(a)])
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Na = defineComponent({
  __name: "BCardBody",
  props: {
    bodyBgVariant: null,
    bodyTag: { default: "div" },
    bodyTextVariant: null,
    overlay: { default: false },
    subtitle: null,
    subtitleTag: { default: "h4" },
    subtitleTextVariant: null,
    title: null,
    titleTag: { default: "h4" },
    text: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "overlay")), l = computed(() => ({
      "card-img-overlay": a.value,
      [`text-${t.bodyTextVariant}`]: t.bodyTextVariant !== void 0,
      [`bg-${t.bodyBgVariant}`]: t.bodyBgVariant !== void 0
    }));
    return (n, i) => (openBlock(), createBlock(resolveDynamicComponent(e.bodyTag), {
      class: normalizeClass(["card-body", unref(l)])
    }, {
      default: withCtx(() => [
        !!e.title || n.$slots.title ? (openBlock(), createBlock(za, {
          key: 0,
          tag: e.titleTag
        }, {
          default: withCtx(() => [
            renderSlot(n.$slots, "title", {}, () => [
              createTextVNode(toDisplayString(e.title), 1)
            ])
          ]),
          _: 3
        }, 8, ["tag"])) : createCommentVNode("", true),
        !!e.subtitle || !!n.$slots.subtitle ? (openBlock(), createBlock(Pa, {
          key: 1,
          tag: e.subtitleTag,
          "text-variant": e.subtitleTextVariant
        }, {
          default: withCtx(() => [
            renderSlot(n.$slots, "subtitle", {}, () => [
              createTextVNode(toDisplayString(e.subtitle), 1)
            ])
          ]),
          _: 3
        }, 8, ["tag", "text-variant"])) : createCommentVNode("", true),
        renderSlot(n.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var La = defineComponent({
  __name: "BCardFooter",
  props: {
    text: null,
    bgVariant: null,
    borderVariant: null,
    html: null,
    tag: { default: "div" },
    textVariant: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(Fa, mergeProps({ class: "card-footer" }, t.$props), {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16));
  }
});
var Ha = defineComponent({
  __name: "BCard",
  props: {
    align: null,
    bgVariant: null,
    bodyBgVariant: null,
    bodyClass: null,
    bodyTag: { default: "div" },
    bodyTextVariant: null,
    borderVariant: null,
    footer: null,
    footerBgVariant: null,
    footerBorderVariant: null,
    footerClass: null,
    footerHtml: { default: "" },
    footerTag: { default: "div" },
    footerTextVariant: null,
    header: null,
    headerBgVariant: null,
    headerBorderVariant: null,
    headerClass: null,
    headerHtml: { default: "" },
    headerTag: { default: "div" },
    headerTextVariant: null,
    imgAlt: null,
    imgBottom: { default: false },
    imgEnd: { default: false },
    imgHeight: null,
    imgLeft: { default: false },
    imgRight: { default: false },
    imgSrc: null,
    imgStart: { default: false },
    imgTop: { default: false },
    imgWidth: null,
    noBody: { default: false },
    overlay: { default: false },
    subtitle: null,
    subtitleTag: { default: "h6" },
    subtitleTextVariant: { default: "muted" },
    tag: { default: "div" },
    textVariant: null,
    title: null,
    titleTag: { default: "h4" },
    bodyText: { default: "" }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "imgBottom")), l = r(toRef(t, "imgEnd")), n = r(toRef(t, "imgLeft")), i = r(toRef(t, "imgRight")), f = r(toRef(t, "imgStart")), d = r(toRef(t, "noBody")), v = computed(() => ({
      [`text-${t.align}`]: t.align !== void 0,
      [`text-${t.textVariant}`]: t.textVariant !== void 0,
      [`bg-${t.bgVariant}`]: t.bgVariant !== void 0,
      [`border-${t.borderVariant}`]: t.borderVariant !== void 0,
      "flex-row": n.value || f.value,
      "flex-row-reverse": l.value || i.value
    })), b = computed(() => ({
      bgVariant: t.headerBgVariant,
      borderVariant: t.headerBorderVariant,
      html: t.headerHtml,
      tag: t.headerTag,
      textVariant: t.headerTextVariant
    })), g = computed(() => ({
      overlay: t.overlay,
      bodyBgVariant: t.bodyBgVariant,
      bodyTag: t.bodyTag,
      bodyTextVariant: t.bodyTextVariant,
      subtitle: t.subtitle,
      subtitleTag: t.subtitleTag,
      subtitleTextVariant: t.subtitleTextVariant,
      title: t.title,
      titleTag: t.titleTag
    })), B = computed(() => ({
      bgVariant: t.footerBgVariant,
      borderVariant: t.footerBorderVariant,
      html: t.footerHtml,
      tag: t.footerTag,
      textVariant: t.footerTextVariant
    })), h2 = computed(() => ({
      src: t.imgSrc,
      alt: t.imgAlt,
      height: t.imgHeight,
      width: t.imgWidth,
      bottom: t.imgBottom,
      end: t.imgEnd,
      left: t.imgLeft,
      right: t.imgRight,
      start: t.imgStart,
      top: t.imgTop
    }));
    return (k, w) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["card", unref(v)])
    }, {
      default: withCtx(() => [
        unref(a) ? createCommentVNode("", true) : renderSlot(k.$slots, "img", { key: 0 }, () => [
          e.imgSrc ? (openBlock(), createBlock(ot, normalizeProps(mergeProps({ key: 0 }, unref(h2))), null, 16)) : createCommentVNode("", true)
        ]),
        e.header || k.$slots.header || e.headerHtml ? (openBlock(), createBlock(Oa, mergeProps({ key: 1 }, unref(b), { class: e.headerClass }), {
          default: withCtx(() => [
            renderSlot(k.$slots, "header", {}, () => [
              createTextVNode(toDisplayString(e.header), 1)
            ])
          ]),
          _: 3
        }, 16, ["class"])) : createCommentVNode("", true),
        unref(d) ? renderSlot(k.$slots, "default", { key: 3 }, () => [
          createTextVNode(toDisplayString(e.bodyText), 1)
        ]) : (openBlock(), createBlock(Na, mergeProps({ key: 2 }, unref(g), { class: e.bodyClass }), {
          default: withCtx(() => [
            renderSlot(k.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(e.bodyText), 1)
            ])
          ]),
          _: 3
        }, 16, ["class"])),
        e.footer || k.$slots.footer || e.footerHtml ? (openBlock(), createBlock(La, mergeProps({ key: 4 }, unref(B), { class: e.footerClass }), {
          default: withCtx(() => [
            renderSlot(k.$slots, "footer", {}, () => [
              createTextVNode(toDisplayString(e.footer), 1)
            ])
          ]),
          _: 3
        }, 16, ["class"])) : createCommentVNode("", true),
        unref(a) ? renderSlot(k.$slots, "img", { key: 5 }, () => [
          e.imgSrc ? (openBlock(), createBlock(ot, normalizeProps(mergeProps({ key: 0 }, unref(h2))), null, 16)) : createCommentVNode("", true)
        ]) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Nn = defineComponent({
  __name: "BCardGroup",
  props: {
    columns: { default: false },
    deck: { default: false },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "columns")), l = r(toRef(t, "deck")), n = computed(
      () => l.value ? "card-deck" : a.value ? "card-columns" : "card-group"
    ), i = computed(() => ({
      [n.value]: !!n.value
    }));
    return (f, d) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(i))
    }, {
      default: withCtx(() => [
        renderSlot(f.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Ln = defineComponent({
  __name: "BCardText",
  props: {
    text: null,
    tag: { default: "p" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "card-text" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var Hn = ["id"];
var En = {
  key: 0,
  class: "carousel-indicators"
};
var Dn = ["data-bs-target", "data-bs-slide-to", "aria-label"];
var Rn = { class: "carousel-inner" };
var qn = ["data-bs-target"];
var jn = createBaseVNode("span", {
  class: "carousel-control-prev-icon",
  "aria-hidden": "true"
}, null, -1);
var Mn = { class: "visually-hidden" };
var Gn = ["data-bs-target"];
var Wn = createBaseVNode("span", {
  class: "carousel-control-next-icon",
  "aria-hidden": "true"
}, null, -1);
var Un = { class: "visually-hidden" };
var Ea = Symbol();
var Xn = defineComponent({
  __name: "BCarousel",
  props: {
    startingSlide: { default: 0 },
    id: null,
    imgHeight: null,
    imgWidth: null,
    background: null,
    modelValue: { default: 0 },
    controls: { default: false },
    indicators: { default: false },
    interval: { default: 5e3 },
    noTouch: { default: false },
    noWrap: { default: false },
    controlsPrevText: { default: "Previous" },
    controlsNextText: { default: "Next" },
    indicatorsButtonLabel: { default: "Slide" }
  },
  emits: ["sliding-start", "sliding-end"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "controls")), n = r(toRef(a, "indicators")), i = r(toRef(a, "noTouch"));
    r(toRef(a, "noWrap"));
    const f = useSlots(), d = ref(), v = ref(), b = ye(toRef(a, "id"), "carousel"), g = ref([]);
    return me(d, "slide.bs.carousel", (B) => t("sliding-start", B)), me(d, "slid.bs.carousel", (B) => t("sliding-end", B)), onMounted(() => {
      v.value = new Carousel(d.value, {
        wrap: !i.value,
        interval: a.interval,
        touch: !i.value
      }), f.default && (g.value = f.default().filter((B) => {
        var h2;
        return ((h2 = B.type) == null ? void 0 : h2.__name) === "BCarouselSlide";
      }));
    }), provide(Ea, {
      background: a.background,
      width: a.imgWidth,
      height: a.imgHeight
    }), (B, h2) => (openBlock(), createElementBlock("div", {
      id: unref(b),
      ref_key: "element",
      ref: d,
      class: "carousel slide",
      "data-bs-ride": "carousel"
    }, [
      unref(n) ? (openBlock(), createElementBlock("div", En, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(g.value, (k, w) => (openBlock(), createElementBlock("button", {
          key: w,
          type: "button",
          "data-bs-target": `#${unref(b)}`,
          "data-bs-slide-to": w,
          class: normalizeClass(w === e.startingSlide ? "active" : ""),
          "aria-current": "true",
          "aria-label": `${e.indicatorsButtonLabel} ${w}`
        }, null, 10, Dn))), 128))
      ])) : createCommentVNode("", true),
      createBaseVNode("div", Rn, [
        renderSlot(B.$slots, "default")
      ]),
      unref(l) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        createBaseVNode("button", {
          class: "carousel-control-prev",
          type: "button",
          "data-bs-target": `#${unref(b)}`,
          "data-bs-slide": "prev"
        }, [
          jn,
          createBaseVNode("span", Mn, toDisplayString(e.controlsPrevText), 1)
        ], 8, qn),
        createBaseVNode("button", {
          class: "carousel-control-next",
          type: "button",
          "data-bs-target": `#${unref(b)}`,
          "data-bs-slide": "next"
        }, [
          Wn,
          createBaseVNode("span", Un, toDisplayString(e.controlsNextText), 1)
        ], 8, Gn)
      ], 64)) : createCommentVNode("", true)
    ], 8, Hn));
  }
});
var Kn = ["data-bs-interval"];
var Jn = ["innerHTML"];
var Yn = { key: 1 };
var Zn = ["innerHTML"];
var Qn = { key: 1 };
var eo = defineComponent({
  __name: "BCarouselSlide",
  props: {
    imgSrc: null,
    imgHeight: null,
    imgWidth: null,
    interval: null,
    active: { default: false },
    background: null,
    caption: null,
    captionHtml: null,
    captionTag: { default: "h3" },
    contentTag: { default: "div" },
    contentVisibleUp: null,
    id: null,
    imgAlt: null,
    imgBlank: { default: false },
    imgBlankColor: { default: "transparent" },
    text: null,
    textHtml: null,
    textTag: { default: "p" }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "active")), l = r(toRef(t, "imgBlank")), n = inject(Ea, {});
    computed(
      () => l.value ? l.value : t.imgSrc
    );
    const i = computed(() => ({
      background: `${t.background || n.background || "rgb(171, 171, 171)"} none repeat scroll 0% 0%`
    })), f = computed(() => ({
      "d-none": t.contentVisibleUp !== void 0,
      [`d-${t.contentVisibleUp}-block`]: t.contentVisibleUp !== void 0
    })), d = computed(() => n.width), v = computed(() => n.height);
    return (b, g) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["carousel-item", { active: unref(a) }]),
      "data-bs-interval": e.interval,
      style: normalizeStyle(unref(i))
    }, [
      renderSlot(b.$slots, "img", {}, () => [
        createVNode(Nt, {
          class: "d-block w-100",
          alt: e.imgAlt,
          src: e.imgSrc,
          width: e.imgWidth || unref(d),
          height: e.imgHeight || unref(v),
          blank: unref(l),
          "blank-color": e.imgBlankColor
        }, null, 8, ["alt", "src", "width", "height", "blank", "blank-color"])
      ]),
      e.caption || e.captionHtml || e.text || e.textHtml || b.$slots.default ? (openBlock(), createBlock(resolveDynamicComponent(e.contentTag), {
        key: 0,
        class: normalizeClass(["carousel-caption", unref(f)])
      }, {
        default: withCtx(() => [
          e.caption || e.captionHtml ? (openBlock(), createBlock(resolveDynamicComponent(e.captionTag), { key: 0 }, {
            default: withCtx(() => [
              e.captionHtml ? (openBlock(), createElementBlock("span", {
                key: 0,
                innerHTML: e.captionHtml
              }, null, 8, Jn)) : (openBlock(), createElementBlock("span", Yn, toDisplayString(e.caption), 1))
            ]),
            _: 1
          })) : createCommentVNode("", true),
          e.text || e.textHtml ? (openBlock(), createBlock(resolveDynamicComponent(e.textTag), { key: 1 }, {
            default: withCtx(() => [
              e.textHtml ? (openBlock(), createElementBlock("span", {
                key: 0,
                innerHTML: e.textHtml
              }, null, 8, Zn)) : (openBlock(), createElementBlock("span", Qn, toDisplayString(e.text), 1))
            ]),
            _: 1
          })) : createCommentVNode("", true),
          renderSlot(b.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"])) : createCommentVNode("", true)
    ], 14, Kn));
  }
});
var Xt = dt("", [], { type: [Boolean, String, Number], default: false });
var Kt = dt("offset", [""], { type: [String, Number], default: null });
var Jt = dt("order", [""], { type: [String, Number], default: null });
var to = defineComponent({
  name: "BCol",
  props: {
    col: { type: [Boolean, String], default: false },
    cols: { type: [String, Number], default: null },
    ...Xt,
    offset: { type: [String, Number], default: null },
    ...Kt,
    order: { type: [String, Number], default: null },
    ...Jt,
    alignSelf: { type: String, default: null },
    tag: { type: String, default: "div" }
  },
  setup(e) {
    const t = r(toRef(e, "col")), a = [
      { content: Xt, propPrefix: "cols", classPrefix: "col" },
      { content: Kt, propPrefix: "offset" },
      { content: Jt, propPrefix: "order" }
    ], l = computed(
      () => a.flatMap((i) => ma(e, i.content, i.propPrefix, i.classPrefix))
    );
    return {
      classes: computed(() => ({
        col: t.value || !l.value.some((i) => /^col-/.test(i) && !e.cols),
        [`col-${e.cols}`]: !!e.cols,
        [`offset-${e.offset}`]: !!e.offset,
        [`order-${e.order}`]: !!e.order,
        [`align-self-${e.alignSelf}`]: !!e.alignSelf
      })),
      classList: l
    };
  }
});
function ao(e, t, a, l, n, i) {
  return openBlock(), createBlock(resolveDynamicComponent(e.tag), {
    class: normalizeClass([e.classes, e.classList])
  }, {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var Ue = ke(to, [["render", ao]]);
var Lt = defineComponent({
  __name: "BTransition",
  props: {
    appear: { default: false },
    mode: null,
    noFade: { default: false },
    transProps: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "appear")), l = r(toRef(t, "noFade")), n = computed(() => {
      const d = {
        name: "",
        enterActiveClass: "",
        enterToClass: "",
        leaveActiveClass: "",
        leaveToClass: "showing",
        enterFromClass: "showing",
        leaveFromClass: ""
      }, v = {
        ...d,
        enterActiveClass: "fade showing",
        leaveActiveClass: "fade showing"
      };
      return l.value ? d : v;
    }), i = computed(() => ({ mode: t.mode, css: true, ...n.value })), f = computed(
      () => t.transProps !== void 0 ? {
        ...i.value,
        ...t.transProps
      } : a.value ? {
        ...i.value,
        appear: true,
        appearActiveClass: n.value.enterActiveClass,
        appearToClass: n.value.enterToClass
      } : i.value
    );
    return (d, v) => (openBlock(), createBlock(Transition, normalizeProps(guardReactiveProps(unref(f))), {
      default: withCtx(() => [
        renderSlot(d.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var lo = "toast-title";
var Yt = 1e3;
var Da = defineComponent({
  components: { BLink: Ce },
  props: {
    ...De,
    delay: { type: Number, default: 5e3 },
    bodyClass: { type: String },
    body: { type: [Object, String] },
    headerClass: { type: String },
    headerTag: { type: String, default: "div" },
    animation: { type: [Boolean, String], default: true },
    id: { type: String },
    isStatus: { type: [Boolean, String], default: false },
    autoHide: { type: [Boolean, String], default: true },
    noCloseButton: { type: [Boolean, String], default: false },
    noFade: { type: [Boolean, String], default: false },
    noHoverPause: { type: [Boolean, String], default: false },
    solid: { type: [Boolean, String], default: false },
    static: { type: [Boolean, String], default: false },
    title: { type: String },
    modelValue: { type: [Boolean, String], default: false },
    toastClass: { type: Array },
    variant: { type: String }
  },
  emits: ["destroyed", "update:modelValue"],
  setup(e, { emit: t, slots: a }) {
    r(toRef(e, "animation"));
    const l = r(toRef(e, "isStatus")), n = r(toRef(e, "autoHide")), i = r(toRef(e, "noCloseButton")), f = r(toRef(e, "noFade")), d = r(toRef(e, "noHoverPause"));
    r(toRef(e, "solid")), r(toRef(e, "static"));
    const v = r(toRef(e, "modelValue")), b = ref(false), g = ref(false), B = ref(false), h2 = computed(() => ({
      [`b-toast-${e.variant}`]: e.variant !== void 0,
      show: B.value || b.value
    }));
    let k, w, y;
    const V = () => {
      typeof k > "u" || (clearTimeout(k), k = void 0);
    }, $ = computed(
      () => Math.max(je(e.delay, 0), Yt)
    ), z = () => {
      v.value && (w = y = 0, V(), g.value = true, Ze(() => {
        B.value = false;
      }));
    }, L = () => {
      V(), t("update:modelValue", true), w = y = 0, g.value = false, nextTick(() => {
        Ze(() => {
          B.value = true;
        });
      });
    }, S = () => {
      if (!n.value || d.value || !k || y)
        return;
      const le = Date.now() - w;
      le > 0 && (V(), y = Math.max($.value - le, Yt));
    }, A = () => {
      (!n.value || d.value || !y) && (y = w = 0), I();
    };
    watch(
      () => v.value,
      (le) => {
        le ? L() : z();
      }
    );
    const I = () => {
      V(), n.value && (k = setTimeout(z, y || $.value), w = Date.now(), y = 0);
    }, M = () => {
      b.value = true, t("update:modelValue", true);
    }, _ = () => {
      b.value = false, I();
    }, T = () => {
      b.value = true;
    }, D = () => {
      b.value = false, y = w = 0, t("update:modelValue", false);
    };
    onUnmounted(() => {
      V(), n.value && t("destroyed", e.id);
    }), onMounted(() => {
      nextTick(() => {
        v.value && Ze(() => {
          L();
        });
      });
    });
    const q = () => {
      nextTick(() => {
        Ze(() => {
          z();
        });
      });
    };
    return () => {
      const le = () => {
        const te = [], K = Te(lo, { hide: z }, a);
        K ? te.push(h(K)) : e.title && te.push(h("strong", { class: "me-auto" }, e.title)), !i.value && te.length !== 0 && te.push(
          h(Ge, {
            class: ["btn-close"],
            onClick: () => {
              z();
            }
          })
        );
        const de = [];
        if (te.length > 0 && de.push(
          h(
            e.headerTag,
            {
              class: "toast-header"
            },
            { default: () => te }
          )
        ), Te("default", { hide: z }, a) || e.body) {
          const se = h(
            Xe(e) ? "b-link" : "div",
            {
              class: ["toast-body", e.bodyClass],
              onClick: Xe(e) ? { click: q } : {}
            },
            Te("default", { hide: z }, a) || e.body
          );
          de.push(se);
        }
        return h(
          "div",
          {
            class: ["toast", e.toastClass, h2.value],
            tabindex: "0"
          },
          de
        );
      };
      return h(
        "div",
        {
          class: ["b-toast"],
          id: e.id,
          role: g.value ? null : l.value ? "status" : "alert",
          "aria-live": g.value ? null : l.value ? "polite" : "assertive",
          "aria-atomic": g.value ? null : "true",
          onmouseenter: S,
          onmouseleave: A
        },
        [
          h(
            Lt,
            {
              noFade: f.value,
              onAfterEnter: _,
              onBeforeEnter: M,
              onAfterLeave: D,
              onBeforeLeave: T
            },
            () => [B.value ? le() : ""]
          )
        ]
      );
    };
  }
});
var Vt = defineComponent({
  __name: "BToaster",
  props: {
    position: { default: "top-right" },
    instance: null
  },
  setup(e) {
    const t = e, a = {
      "top-left": "top-0 start-0",
      "top-center": "top-0 start-50 translate-middle-x",
      "top-right": "top-0 end-0",
      "middle-left": "top-50 start-0 translate-middle-y",
      "middle-center": "top-50 start-50 translate-middle",
      "middle-right": "top-50 end-0 translate-middle-y",
      "bottom-left": "bottom-0 start-0",
      "bottom-center": "bottom-0 start-50 translate-middle-x",
      "bottom-right": "bottom-0 end-0"
    }, l = computed(() => a[t.position]), n = (i) => {
      var f;
      (f = t.instance) == null || f.remove(i);
    };
    return (i, f) => {
      var d;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([[unref(l)], "b-toaster position-fixed p-3"]),
        style: { "z-index": "11" }
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList((d = e.instance) == null ? void 0 : d.toasts(e.position).value, (v) => (openBlock(), createBlock(Da, {
          id: v.options.id,
          key: v.options.id,
          modelValue: v.options.value,
          "onUpdate:modelValue": (b) => v.options.value = b,
          delay: v.options.delay,
          title: v.content.title,
          body: v.content.body,
          component: v.content.body,
          variant: v.options.variant,
          onDestroyed: n
        }, null, 8, ["id", "modelValue", "onUpdate:modelValue", "delay", "title", "body", "component", "variant"]))), 128))
      ], 2);
    };
  }
});
var Re = { delay: 5e3, value: true, pos: "top-right" };
var Zt = class {
  constructor(t) {
    ve(this, "vm");
    ve(this, "containerPositions");
    isReactive(t) ? this.vm = t : this.vm = reactive(t), this.containerPositions = computed(() => {
      const a = /* @__PURE__ */ new Set([]);
      return this.vm.toasts.map((l) => {
        l.options.pos && a.add(l.options.pos);
      }), a;
    });
  }
  toasts(t) {
    return t ? computed(
      () => this.vm.toasts.filter((a) => {
        if (a.options.pos === t && a.options.value)
          return a;
      })
    ) : computed(() => this.vm.toasts);
  }
  remove(...t) {
    this.vm.toasts = this.vm.toasts.filter((a) => {
      if (a.options.id && !t.includes(a.options.id))
        return a;
    });
  }
  isRoot() {
    var t;
    return (t = this.vm.root) != null ? t : false;
  }
  show(t, a = Re) {
    const l = { id: Ie(), ...Re, ...a }, n = {
      options: reactive(l),
      content: t
    };
    return this.vm.toasts.push(n), n;
  }
  info(t, a = Re) {
    return this.show(t, { variant: "info", ...a });
  }
  danger(t, a = Re) {
    return this.show(t, { variant: "danger", ...a });
  }
  warning(t, a = Re) {
    return this.show(t, { variant: "warning", ...a });
  }
  success(t, a = Re) {
    return this.show(t, { variant: "success", ...a });
  }
  hide() {
  }
};
var no = class {
  constructor() {
    ve(this, "vms");
    ve(this, "rootInstance");
    ve(this, "useToast", qa);
    this.vms = {};
  }
  getOrCreateViewModel(t) {
    if (!t) {
      if (this.rootInstance)
        return this.vms[this.rootInstance];
      const a = { root: true, toasts: [], container: void 0, id: Symbol("toast") };
      return this.rootInstance = a.id, this.vms[a.id] = a, a;
    }
    if (t.root) {
      if (this.rootInstance)
        return this.vms[this.rootInstance];
      this.rootInstance = t.id;
    }
    return this.vms[t.id] = t, t;
  }
  getVM(t) {
    if (!t && this.rootInstance)
      return this.vms[this.rootInstance];
    if (t)
      return this.vms[t];
  }
};
var _t = Symbol();
var Ra = Symbol();
var oo = {
  container: void 0,
  toasts: [],
  root: false
};
function so() {
  return inject(Ra);
}
function qa(e, t = _t) {
  const a = inject(so());
  if (!e)
    return new Zt(a.getOrCreateViewModel());
  const l = { id: Symbol("toastInstance") }, n = { ...oo, ...l, ...e }, i = a.getOrCreateViewModel(n);
  return new Zt(i);
}
var ro = {
  install: (e, t = {}) => {
    var a, l, n, i;
    e.provide(Ra, (l = (a = t == null ? void 0 : t.BToast) == null ? void 0 : a.injectkey) != null ? l : _t), e.provide((i = (n = t == null ? void 0 : t.BToast) == null ? void 0 : n.injectkey) != null ? i : _t, new no());
  }
};
var io = defineComponent({
  name: "BContainer",
  props: {
    gutterX: { type: String, default: null },
    gutterY: { type: String, default: null },
    fluid: { type: [Boolean, String], default: false },
    toast: { type: Object },
    position: { type: String, required: false },
    tag: { type: String, default: "div" }
  },
  setup(e, { slots: t, expose: a }) {
    const l = ref();
    let n;
    const i = computed(() => ({
      container: !e.fluid,
      ["container-fluid"]: typeof e.fluid == "boolean" && e.fluid,
      [`container-${e.fluid}`]: typeof e.fluid == "string",
      [`gx-${e.gutterX}`]: e.gutterX !== null,
      [`gy-${e.gutterY}`]: e.gutterY !== null
    }));
    return onMounted(() => {
      e.toast;
    }), e.toast && (n = qa({ container: l, root: e.toast.root }), a({})), () => {
      var d;
      const f = [];
      return n == null || n.containerPositions.value.forEach((v) => {
        f.push(h(Vt, { key: v, instance: n, position: v }));
      }), h(e.tag, { class: [i.value, e.position], ref: l }, [
        ...f,
        (d = t.default) == null ? void 0 : d.call(t)
      ]);
    };
  },
  methods: {}
});
var uo = { class: "visually-hidden" };
var co = ["aria-labelledby", "role"];
var ja = defineComponent({
  __name: "BDropdown",
  props: {
    id: null,
    menuClass: null,
    size: null,
    splitClass: null,
    splitVariant: null,
    text: null,
    toggleClass: null,
    autoClose: { type: [Boolean, String], default: true },
    block: { default: false },
    boundary: { default: "clippingParents" },
    dark: { default: false },
    disabled: { default: false },
    isNav: { default: false },
    dropup: { default: false },
    dropright: { default: false },
    dropleft: { default: false },
    noFlip: { default: false },
    offset: { default: 0 },
    popperOpts: { default: () => ({}) },
    right: { default: false },
    role: { default: "menu" },
    split: { default: false },
    splitButtonType: { default: "button" },
    splitHref: { default: void 0 },
    noCaret: { default: false },
    toggleText: { default: "Toggle dropdown" },
    variant: { default: "secondary" }
  },
  emits: ["show", "shown", "hide", "hidden", "click", "toggle"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = r(toRef(l, "block")), i = r(toRef(l, "dark")), f = r(toRef(l, "disabled")), d = r(toRef(l, "dropup")), v = r(toRef(l, "dropright")), b = r(toRef(l, "isNav")), g = r(toRef(l, "dropleft")), B = r(toRef(l, "right")), h2 = r(toRef(l, "split")), k = r(toRef(l, "noCaret")), w = ref(), y = ref(), V = ref(), $ = ye(toRef(l, "id"), "dropdown");
    me(w, "show.bs.dropdown", () => a("show")), me(w, "shown.bs.dropdown", () => a("shown")), me(w, "hide.bs.dropdown", () => a("hide")), me(w, "hidden.bs.dropdown", () => a("hidden"));
    const z = (T) => {
      h2.value && a("click", T);
    }, L = computed(() => ({
      "d-grid": n.value,
      "d-flex": n.value && h2.value
    })), S = computed(() => ({
      "nav-link": b.value,
      "dropdown-toggle": !h2.value,
      "dropdown-toggle-no-caret": k.value && !h2.value,
      "w-100": h2.value && n.value
    })), A = computed(() => ({
      "dropdown-menu-dark": i.value,
      "dropdown-menu-end": B.value
    })), I = computed(() => ({
      "data-bs-toggle": h2.value ? void 0 : "dropdown",
      "aria-expanded": h2.value ? void 0 : false,
      ref: h2.value ? void 0 : y,
      href: h2.value ? l.splitHref : void 0
    })), M = computed(() => ({
      ref: h2.value ? y : void 0
    })), _ = () => {
      var T;
      (T = V.value) == null || T.hide();
    };
    return onMounted(() => {
      var T;
      V.value = new Dropdown((T = y.value) == null ? void 0 : T.$el, {
        autoClose: l.autoClose,
        boundary: l.boundary,
        offset: l.offset ? l.offset.toString() : "",
        reference: l.offset || h2.value ? "parent" : "toggle",
        popperConfig: (D) => {
          const q = {
            placement: "bottom-start",
            modifiers: l.noFlip ? [
              {
                name: "flip",
                options: {
                  fallbackPlacements: []
                }
              }
            ] : []
          };
          return d.value ? q.placement = B.value ? "top-end" : "top-start" : v.value ? q.placement = "right-start" : g.value ? q.placement = "left-start" : B.value && (q.placement = "bottom-end"), wt(D, wt(q, l.popperOpts));
        }
      });
    }), t({
      hide: _
    }), (T, D) => (openBlock(), createElementBlock("div", {
      ref_key: "parent",
      ref: w,
      class: normalizeClass([unref(L), "btn-group"])
    }, [
      createVNode(Ke, mergeProps({
        id: unref($),
        variant: e.splitVariant || e.variant,
        size: e.size,
        class: [unref(S), unref(h2) ? e.splitClass : e.toggleClass],
        disabled: unref(f),
        type: e.splitButtonType
      }, unref(I), { onClick: z }), {
        default: withCtx(() => [
          renderSlot(T.$slots, "button-content", {}, () => [
            createTextVNode(toDisplayString(e.text), 1)
          ])
        ]),
        _: 3
      }, 16, ["id", "variant", "size", "class", "disabled", "type"]),
      unref(h2) ? (openBlock(), createBlock(Ke, mergeProps({
        key: 0,
        variant: e.variant,
        size: e.size,
        disabled: unref(f)
      }, unref(M), {
        class: [e.toggleClass, "dropdown-toggle-split dropdown-toggle"],
        "data-bs-toggle": "dropdown",
        "aria-expanded": "false",
        onClick: D[0] || (D[0] = (q) => a("toggle"))
      }), {
        default: withCtx(() => [
          createBaseVNode("span", uo, [
            renderSlot(T.$slots, "toggle-text", {}, () => [
              createTextVNode(toDisplayString(e.toggleText), 1)
            ])
          ])
        ]),
        _: 3
      }, 16, ["variant", "size", "disabled", "class"])) : createCommentVNode("", true),
      createBaseVNode("ul", {
        class: normalizeClass(["dropdown-menu", [e.menuClass, unref(A)]]),
        "aria-labelledby": unref($),
        role: e.role
      }, [
        renderSlot(T.$slots, "default")
      ], 10, co)
    ], 2));
  }
});
var fo = { role: "presentation" };
var vo = defineComponent({
  __name: "BDropdownDivider",
  props: {
    tag: { default: "hr" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("li", fo, [
      (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        class: "dropdown-divider",
        role: "separator",
        "aria-orientation": "horizontal"
      }))
    ]));
  }
});
var mo = {};
var bo = { role: "presentation" };
var go = { class: "px-4 py-3" };
function po(e, t) {
  return openBlock(), createElementBlock("li", bo, [
    createBaseVNode("form", go, [
      renderSlot(e.$slots, "default")
    ])
  ]);
}
var ho = ke(mo, [["render", po]]);
var yo = { role: "presentation" };
var Bo = ["id", "aria-describedby"];
var $o = {
  inheritAttrs: false
};
var ko = defineComponent({
  ...$o,
  __name: "BDropdownGroup",
  props: {
    id: null,
    ariaDescribedby: null,
    header: null,
    headerClass: { default: void 0 },
    headerTag: { default: "header" },
    headerVariant: null
  },
  setup(e) {
    const t = e, a = computed(
      () => t.id ? `${t.id}_group_dd_header` : void 0
    ), l = computed(
      () => t.headerTag === "header" ? void 0 : "heading"
    ), n = computed(() => ({
      [`text-${t.headerVariant}`]: t.headerVariant !== void 0
    }));
    return (i, f) => (openBlock(), createElementBlock("li", yo, [
      (openBlock(), createBlock(resolveDynamicComponent(e.headerTag), {
        id: unref(a),
        class: normalizeClass(["dropdown-header", [unref(n), e.headerClass]]),
        role: unref(l)
      }, {
        default: withCtx(() => [
          renderSlot(i.$slots, "header", {}, () => [
            createTextVNode(toDisplayString(e.header), 1)
          ])
        ]),
        _: 3
      }, 8, ["id", "class", "role"])),
      createBaseVNode("ul", mergeProps({
        id: e.id,
        role: "group",
        class: "list-unstyled"
      }, i.$attrs, {
        "aria-describedby": e.ariaDescribedby || unref(a)
      }), [
        renderSlot(i.$slots, "default")
      ], 16, Bo)
    ]));
  }
});
var So = {};
var Co = { class: "dropdown-header" };
function wo(e, t) {
  return openBlock(), createElementBlock("li", null, [
    createBaseVNode("h6", Co, [
      renderSlot(e.$slots, "default")
    ])
  ]);
}
var To = ke(So, [["render", wo]]);
var Vo = {
  inheritAttrs: false
};
var _o = defineComponent({
  ...Vo,
  __name: "BDropdownItem",
  props: {
    href: null,
    linkClass: null,
    active: { default: false },
    disabled: { default: false },
    rel: { default: void 0 },
    target: { default: "_self" },
    variant: null
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "active")), n = r(toRef(a, "disabled")), i = useAttrs(), f = computed(() => ({
      active: l.value,
      disabled: n.value,
      [`text-${a.variant}`]: a.variant !== void 0
    })), d = computed(
      () => a.href ? "a" : i.to ? Ce : "button"
    ), v = computed(() => ({
      disabled: n.value,
      "aria-current": l.value ? "true" : null,
      href: d.value === "a" ? a.href : null,
      rel: a.rel,
      type: d.value === "button" ? "button" : null,
      target: a.target,
      ...i.to ? { activeClass: "active", ...i } : {}
    })), b = (g) => t("click", g);
    return (g, B) => (openBlock(), createElementBlock("li", {
      role: "presentation",
      class: normalizeClass(g.$attrs.class)
    }, [
      (openBlock(), createBlock(resolveDynamicComponent(unref(d)), mergeProps({
        class: ["dropdown-item", [unref(f), e.linkClass]]
      }, unref(v), { onClick: b }), {
        default: withCtx(() => [
          renderSlot(g.$slots, "default")
        ]),
        _: 3
      }, 16, ["class"]))
    ], 2));
  }
});
var Ao = {
  inheritAttrs: false
};
var xo = defineComponent({
  ...Ao,
  __name: "BDropdownItemButton",
  props: {
    buttonClass: null,
    active: { default: false },
    activeClass: { default: "active" },
    disabled: { default: false },
    variant: null
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "active")), n = r(toRef(a, "disabled")), i = computed(() => ({
      [a.activeClass]: l.value,
      disabled: n.value,
      [`text-${a.variant}`]: a.variant !== void 0
    })), f = computed(() => ({
      disabled: n.value
    })), d = (v) => t("click", v);
    return (v, b) => (openBlock(), createElementBlock("li", {
      role: "presentation",
      class: normalizeClass(v.$attrs.class)
    }, [
      createBaseVNode("button", mergeProps({
        role: "menu",
        type: "button",
        class: ["dropdown-item", [unref(i), e.buttonClass]]
      }, unref(f), { onClick: d }), [
        renderSlot(v.$slots, "default")
      ], 16)
    ], 2));
  }
});
var Io = { role: "presentation" };
var Fo = { class: "px-4 py-1 mb-0 text-muted" };
var Oo = defineComponent({
  __name: "BDropdownText",
  props: {
    text: { default: "" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("li", Io, [
      createBaseVNode("p", Fo, [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ])
    ]));
  }
});
var zo = ["id", "novalidate", "onSubmit"];
var Ma = defineComponent({
  __name: "BForm",
  props: {
    id: null,
    floating: { default: false },
    novalidate: { default: false },
    validated: { default: false }
  },
  emits: ["submit"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "floating")), n = r(toRef(a, "novalidate")), i = r(toRef(a, "validated")), f = computed(() => ({
      "form-floating": l.value,
      "was-validated": i.value
    })), d = (v) => t("submit", v);
    return (v, b) => (openBlock(), createElementBlock("form", {
      id: e.id,
      novalidate: unref(n),
      class: normalizeClass(unref(f)),
      onSubmit: withModifiers(d, ["prevent"])
    }, [
      renderSlot(v.$slots, "default")
    ], 42, zo));
  }
});
var Po = { class: "form-floating" };
var No = ["for"];
var Lo = defineComponent({
  __name: "BFormFloatingLabel",
  props: {
    labelFor: null,
    label: null,
    text: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("div", Po, [
      renderSlot(t.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(e.text), 1)
      ]),
      createBaseVNode("label", { for: e.labelFor }, [
        renderSlot(t.$slots, "label", {}, () => [
          createTextVNode(toDisplayString(e.label), 1)
        ])
      ], 8, No)
    ]));
  }
});
var At = defineComponent({
  __name: "BFormInvalidFeedback",
  props: {
    ariaLive: null,
    forceShow: { default: false },
    id: null,
    text: null,
    role: null,
    state: { default: void 0 },
    tag: { default: "div" },
    tooltip: { default: false }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "forceShow")), l = r(toRef(t, "state")), n = r(toRef(t, "tooltip")), i = computed(
      () => a.value === true || l.value === false
    ), f = computed(() => ({
      "d-block": i.value,
      "invalid-feedback": !n.value,
      "invalid-tooltip": n.value
    })), d = computed(() => ({
      id: t.id,
      role: t.role,
      "aria-live": t.ariaLive,
      "aria-atomic": t.ariaLive ? "true" : void 0
    }));
    return (v, b) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({ class: unref(f) }, unref(d)), {
      default: withCtx(() => [
        renderSlot(v.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16, ["class"]));
  }
});
var tt = defineComponent({
  __name: "BFormRow",
  props: {
    tag: { default: "div" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "row d-flex flex-wrap" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }));
  }
});
var xt = defineComponent({
  __name: "BFormText",
  props: {
    id: null,
    inline: { default: false },
    tag: { default: "small" },
    text: null,
    textVariant: { default: "muted" }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "inline")), l = computed(() => ({
      "form-text": !a.value,
      [`text-${t.textVariant}`]: !!t.textVariant
    })), n = computed(() => ({
      id: t.id
    }));
    return (i, f) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({ class: unref(l) }, unref(n)), {
      default: withCtx(() => [
        renderSlot(i.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16, ["class"]));
  }
});
var It = defineComponent({
  __name: "BFormValidFeedback",
  props: {
    ariaLive: null,
    forceShow: { default: false },
    id: null,
    role: null,
    text: null,
    state: { default: void 0 },
    tag: { default: "div" },
    tooltip: { default: false }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "forceShow")), l = r(toRef(t, "state")), n = r(toRef(t, "tooltip")), i = computed(
      () => a.value === true || l.value === true
    ), f = computed(() => ({
      "d-block": i.value,
      "valid-feedback": !n.value,
      "valid-tooltip": n.value
    })), d = computed(() => ({
      id: t.id || null,
      role: t.role || null,
      "aria-live": t.ariaLive || null,
      "aria-atomic": t.ariaLive ? "true" : null
    }));
    return (v, b) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({ class: unref(f) }, unref(d)), {
      default: withCtx(() => [
        renderSlot(v.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16, ["class"]));
  }
});
var Ho = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "aria-required", "value", "indeterminate"];
var Eo = ["for"];
var Do = {
  inheritAttrs: false
};
var Ga = defineComponent({
  ...Do,
  __name: "BFormCheckbox",
  props: {
    ariaLabel: null,
    ariaLabelledBy: null,
    form: null,
    indeterminate: null,
    name: null,
    id: { default: void 0 },
    autofocus: { default: false },
    plain: { default: false },
    button: { default: false },
    switch: { default: false },
    disabled: { default: false },
    buttonVariant: { default: "secondary" },
    inline: { default: false },
    required: { default: void 0 },
    size: { default: "md" },
    state: { default: void 0 },
    uncheckedValue: { type: [Array, Set, Boolean, String, Object, Number], default: false },
    value: { type: [Array, Set, Boolean, String, Object, Number], default: true },
    modelValue: { type: [Array, Set, Boolean, String, Object, Number], default: void 0 }
  },
  emits: ["update:modelValue", "input", "change"],
  setup(e, { emit: t }) {
    const a = e, l = r(
      toRef(a, "indeterminate")
    ), n = r(toRef(a, "autofocus")), i = r(toRef(a, "plain")), f = r(toRef(a, "button")), d = r(toRef(a, "switch")), v = r(toRef(a, "disabled")), b = r(toRef(a, "inline")), g = r(toRef(a, "required")), B = r(toRef(a, "state")), h2 = ye(toRef(a, "id"), "form-check"), k = ref(null), w = ref(false), y = computed({
      get: () => a.uncheckedValue ? Array.isArray(a.modelValue) ? a.modelValue.indexOf(a.value) > -1 : a.modelValue === a.value : a.modelValue,
      set: (A) => {
        let I = A;
        Array.isArray(a.modelValue) ? a.uncheckedValue && (I = a.modelValue, A ? (I.indexOf(a.uncheckedValue) > -1 && I.splice(I.indexOf(a.uncheckedValue), 1), I.push(a.value)) : (I.indexOf(a.value) > -1 && I.splice(I.indexOf(a.value), 1), I.push(a.uncheckedValue))) : I = A ? a.value : a.uncheckedValue, t("input", I), t("update:modelValue", I), t("change", I);
      }
    }), V = computed(() => Array.isArray(a.modelValue) ? a.modelValue.indexOf(a.value) > -1 : JSON.stringify(a.modelValue) === JSON.stringify(a.value)), $ = reactive({
      plain: toRef(i, "value"),
      button: toRef(f, "value"),
      inline: toRef(b, "value"),
      switch: toRef(d, "value"),
      size: toRef(a, "size"),
      state: toRef(B, "value"),
      buttonVariant: toRef(a, "buttonVariant")
    }), z = ha($), L = ya($), S = Ba($);
    return onMounted(() => {
      n.value && k.value.focus();
    }), (A, I) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(unref(z))
    }, [
      withDirectives(createBaseVNode("input", mergeProps({ id: unref(h2) }, A.$attrs, {
        ref_key: "input",
        ref: k,
        "onUpdate:modelValue": I[0] || (I[0] = (M) => isRef(y) ? y.value = M : null),
        class: unref(L),
        type: "checkbox",
        disabled: unref(v),
        required: !!e.name && !!unref(g),
        name: e.name,
        form: e.form,
        "aria-label": e.ariaLabel,
        "aria-labelledby": e.ariaLabelledBy,
        "aria-required": e.name && unref(g) ? "true" : void 0,
        value: e.value,
        indeterminate: unref(l),
        onFocus: I[1] || (I[1] = (M) => w.value = true),
        onBlur: I[2] || (I[2] = (M) => w.value = false)
      }), null, 16, Ho), [
        [vModelCheckbox, unref(y)]
      ]),
      A.$slots.default || !unref(i) ? (openBlock(), createElementBlock("label", {
        key: 0,
        for: unref(h2),
        class: normalizeClass([unref(S), { active: unref(V), focus: w.value }])
      }, [
        renderSlot(A.$slots, "default")
      ], 10, Eo)) : createCommentVNode("", true)
    ], 2));
  }
});
var Ro = ["id"];
var qo = ["innerHTML"];
var jo = ["textContent"];
var Mo = defineComponent({
  __name: "BFormCheckboxGroup",
  props: {
    id: null,
    form: null,
    modelValue: { default: () => [] },
    ariaInvalid: { default: void 0 },
    autofocus: { default: false },
    buttonVariant: { default: "secondary" },
    buttons: { default: false },
    disabled: { default: false },
    disabledField: { default: "disabled" },
    htmlField: { default: "html" },
    name: null,
    options: { default: () => [] },
    plain: { default: false },
    required: { default: false },
    size: null,
    stacked: { default: false },
    state: { default: void 0 },
    switches: { default: false },
    textField: { default: "text" },
    validated: { default: false },
    valueField: { default: "value" }
  },
  emits: ["input", "update:modelValue", "change"],
  setup(e, { emit: t }) {
    const a = e;
    r(toRef(a, "autofocus"));
    const l = r(toRef(a, "buttons")), n = r(toRef(a, "disabled"));
    r(toRef(a, "plain"));
    const i = r(toRef(a, "required")), f = r(toRef(a, "stacked")), d = r(toRef(a, "state")), v = r(toRef(a, "switches")), b = r(toRef(a, "validated")), g = useSlots(), B = "BFormCheckbox", h2 = ye(toRef(a, "id"), "checkbox"), k = ye(toRef(a, "name"), "checkbox"), w = computed({
      get: () => a.modelValue,
      set: (L) => {
        if (JSON.stringify(L) === JSON.stringify(a.modelValue))
          return;
        const S = a.options.filter(
          (A) => L.map((I) => JSON.stringify(I)).includes(JSON.stringify(typeof A == "string" ? A : A[a.valueField]))
        ).map((A) => typeof A == "string" ? A : A[a.valueField]);
        t("input", S), t("update:modelValue", S), t("change", S);
      }
    }), y = computed(
      () => (g.first ? nt(g.first(), B, n.value) : []).concat(a.options.map((L) => Sa(L, a))).concat(g.default ? nt(g.default(), B, n.value) : []).map((L, S) => Ca(L, S, a, k, h2)).map((L) => ({
        ...L,
        props: {
          switch: v.value,
          ...L.props
        }
      }))
    ), V = reactive({
      required: toRef(i, "value"),
      ariaInvalid: toRef(a, "ariaInvalid"),
      state: toRef(d, "value"),
      validated: toRef(b, "value"),
      buttons: toRef(l, "value"),
      stacked: toRef(f, "value"),
      size: toRef(a, "size")
    }), $ = $a(V), z = ka(V);
    return (L, S) => (openBlock(), createElementBlock("div", mergeProps(unref($), {
      id: unref(h2),
      role: "group",
      class: [unref(z), "bv-no-focus-ring"],
      tabindex: "-1"
    }), [
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(y), (A, I) => (openBlock(), createBlock(Ga, mergeProps({
        key: I,
        modelValue: unref(w),
        "onUpdate:modelValue": S[0] || (S[0] = (M) => isRef(w) ? w.value = M : null)
      }, A.props), {
        default: withCtx(() => [
          A.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: A.html
          }, null, 8, qo)) : (openBlock(), createElementBlock("span", {
            key: 1,
            textContent: toDisplayString(A.text)
          }, null, 8, jo))
        ]),
        _: 2
      }, 1040, ["modelValue"]))), 128))
    ], 16, Ro));
  }
});
var Wa = ["input", "select", "textarea"];
var Go = Wa.map((e) => `${e}:not([disabled])`).join();
var Wo = [...Wa, "a", "button", "label"];
var Uo = "label";
var Xo = "invalid-feedback";
var Ko = "valid-feedback";
var Jo = "description";
var Yo = "default";
var Zo = defineComponent({
  components: { BCol: Ue, BFormInvalidFeedback: At, BFormRow: tt, BFormText: xt, BFormValidFeedback: It },
  props: {
    contentCols: { type: [Boolean, String, Number], required: false },
    contentColsLg: { type: [Boolean, String, Number], required: false },
    contentColsMd: { type: [Boolean, String, Number], required: false },
    contentColsSm: { type: [Boolean, String, Number], required: false },
    contentColsXl: { type: [Boolean, String, Number], required: false },
    description: { type: [String], required: false },
    disabled: { type: [Boolean, String], default: false },
    feedbackAriaLive: { type: String, default: "assertive" },
    id: { type: String, required: false },
    invalidFeedback: { type: String, required: false },
    label: { type: String, required: false },
    labelAlign: { type: [Boolean, String, Number], required: false },
    labelAlignLg: { type: [Boolean, String, Number], required: false },
    labelAlignMd: { type: [Boolean, String, Number], required: false },
    labelAlignSm: { type: [Boolean, String, Number], required: false },
    labelAlignXl: { type: [Boolean, String, Number], required: false },
    labelClass: { type: [Array, Object, String], required: false },
    labelCols: { type: [Boolean, String, Number], required: false },
    labelColsLg: { type: [Boolean, String, Number], required: false },
    labelColsMd: { type: [Boolean, String, Number], required: false },
    labelColsSm: { type: [Boolean, String, Number], required: false },
    labelColsXl: { type: [Boolean, String, Number], required: false },
    labelFor: { type: String, required: false },
    labelSize: { type: String, required: false },
    labelSrOnly: { type: [Boolean, String], default: false },
    state: { type: [Boolean, String], default: null },
    tooltip: { type: [Boolean, String], default: false },
    validFeedback: { type: String, required: false },
    validated: { type: [Boolean, String], default: false },
    floating: { type: [Boolean, String], default: false }
  },
  setup(e, { attrs: t }) {
    const a = r(toRef(e, "disabled")), l = r(toRef(e, "labelSrOnly")), n = r(toRef(e, "state")), i = r(toRef(e, "tooltip")), f = r(toRef(e, "validated")), d = r(toRef(e, "floating")), v = null, b = ["xs", "sm", "md", "lg", "xl"], g = (I, M) => b.reduce((_, T) => {
      const D = jt(T === "xs" ? "" : T, `${M}Align`), q = I[D] || null;
      return q && (T === "xs" ? _.push(`text-${q}`) : _.push(`text-${T}-${q}`)), _;
    }, []), B = (I, M) => b.reduce((_, T) => {
      const D = jt(T === "xs" ? "" : T, `${M}Cols`);
      let q = I[D];
      return q = q === "" ? true : q || false, typeof q != "boolean" && q !== "auto" && (q = We(q, 0), q = q > 0 ? q : false), q && (T === "xs" ? _.cols = q : _[T || (typeof q == "boolean" ? "col" : "cols")] = q), _;
    }, {}), h2 = ref(), k = (I, M = null) => {
      if (Il && e.labelFor) {
        const _ = Hl(`#${Al(e.labelFor)}`, h2);
        if (_) {
          const T = "aria-describedby", D = (I || "").split(Qe), q = (M || "").split(Qe), le = (va(_, T) || "").split(Qe).filter((te) => !q.includes(te)).concat(D).filter((te, K, de) => de.indexOf(te) === K).filter((te) => te).join(" ").trim();
          le ? Dl(_, T, le) : Rl(_, T);
        }
      }
    }, w = computed(() => B(e, "content")), y = computed(() => g(e, "label")), V = computed(() => B(e, "label")), $ = computed(
      () => Object.keys(w.value).length > 0 || Object.keys(V.value).length > 0
    ), z = computed(
      () => typeof n.value == "boolean" ? n.value : null
    ), L = computed(() => {
      const I = z.value;
      return I === true ? "is-valid" : I === false ? "is-invalid" : null;
    }), S = computed(
      () => ct(t.ariaInvalid, n.value)
    );
    return watch(
      () => v,
      (I, M) => {
        I !== M && k(I, M);
      }
    ), onMounted(() => {
      nextTick(() => {
        k(v);
      });
    }), {
      disabledBoolean: a,
      labelSrOnlyBoolean: l,
      stateBoolean: n,
      tooltipBoolean: i,
      validatedBoolean: f,
      floatingBoolean: d,
      ariaDescribedby: v,
      computedAriaInvalid: S,
      contentColProps: w,
      isHorizontal: $,
      labelAlignClasses: y,
      labelColProps: V,
      onLegendClick: (I) => {
        if (e.labelFor)
          return;
        const { target: M } = I, _ = M ? M.tagName : "";
        if (Wo.indexOf(_) !== -1)
          return;
        const T = El(Go, h2).filter(Ll);
        T.length === 1 && Pl(T[0]);
      },
      stateClass: L
    };
  },
  render() {
    const e = this.$props, t = this.$slots, a = ye(), l = !e.labelFor;
    let n = null;
    const i = Te(Uo, {}, t) || e.label, f = i ? Ie("_BV_label_") : null;
    if (i || this.isHorizontal) {
      const S = l ? "legend" : "label";
      if (this.labelSrOnlyBoolean)
        i && (n = h(
          S,
          {
            class: "visually-hidden",
            id: f,
            for: e.labelFor || null
          },
          i
        )), this.isHorizontal ? n = h(Ue, this.labelColProps, { default: () => n }) : n = h("div", {}, [n]);
      else {
        const A = {
          onClick: l ? this.onLegendClick : null,
          ...this.isHorizontal ? this.labelColProps : {},
          tag: this.isHorizontal ? S : null,
          id: f,
          for: e.labelFor || null,
          tabIndex: l ? "-1" : null,
          class: [
            this.isHorizontal ? "col-form-label" : "form-label",
            {
              "bv-no-focus-ring": l,
              "col-form-label": this.isHorizontal || l,
              "pt-0": !this.isHorizontal && l,
              "d-block": !this.isHorizontal && !l,
              [`col-form-label-${e.labelSize}`]: !!e.labelSize
            },
            this.labelAlignClasses,
            e.labelClass
          ]
        };
        this.isHorizontal ? n = h(Ue, A, { default: () => i }) : n = h(S, A, i);
      }
    }
    let d = null;
    const v = Te(Xo, {}, t) || this.invalidFeedback, b = v ? Ie("_BV_feedback_invalid_") : void 0;
    v && (d = h(
      At,
      {
        ariaLive: e.feedbackAriaLive,
        id: b,
        state: this.stateBoolean,
        tooltip: this.tooltipBoolean
      },
      { default: () => v }
    ));
    let g = null;
    const B = Te(Ko, {}, t) || this.validFeedback, h2 = B ? Ie("_BV_feedback_valid_") : void 0;
    B && (g = h(
      It,
      {
        ariaLive: e.feedbackAriaLive,
        id: h2,
        state: this.stateBoolean,
        tooltip: this.tooltipBoolean
      },
      { default: () => B }
    ));
    let k = null;
    const w = Te(Jo, {}, t) || this.description, y = w ? Ie("_BV_description_") : void 0;
    w && (k = h(
      xt,
      {
        id: y
      },
      { default: () => w }
    ));
    const V = this.ariaDescribedby = [
      y,
      this.stateBoolean === false ? b : null,
      this.stateBoolean === true ? h2 : null
    ].filter((S) => S).join(" ") || null, $ = [
      Te(Yo, { ariaDescribedby: V, descriptionId: y, id: a, labelId: f }, t) || "",
      d,
      g,
      k
    ];
    !this.isHorizontal && this.floatingBoolean && $.push(n);
    let z = h(
      "div",
      {
        ref: "content",
        class: [
          {
            "form-floating": !this.isHorizontal && this.floatingBoolean
          }
        ]
      },
      $
    );
    this.isHorizontal && (z = h(Ue, { ref: "content", ...this.contentColProps }, { default: () => $ }));
    const L = {
      class: [
        "mb-3",
        this.stateClass,
        {
          "was-validated": this.validatedBoolean
        }
      ],
      id: ye(toRef(e, "id")).value,
      disabled: l ? this.disabledBoolean : null,
      role: l ? null : "group",
      "aria-invalid": this.computedAriaInvalid,
      "aria-labelledby": l && this.isHorizontal ? f : null
    };
    return this.isHorizontal && !l ? h(tt, L, { default: () => [n, z] }) : h(
      l ? "fieldset" : "div",
      L,
      this.isHorizontal && l ? [h(tt, {}, { default: () => [n, z] })] : this.isHorizontal || !this.floatingBoolean ? [n, z] : [z]
    );
  }
});
var Qt = [
  "text",
  "number",
  "email",
  "password",
  "search",
  "url",
  "tel",
  "date",
  "time",
  "range",
  "color"
];
var Qo = defineComponent({
  props: {
    ...wa,
    max: { type: [String, Number], required: false },
    min: { type: [String, Number], required: false },
    step: { type: [String, Number], required: false },
    type: {
      type: String,
      default: "text",
      validator: (e) => Qt.includes(e)
    }
  },
  emits: ["update:modelValue", "change", "blur", "input"],
  setup(e, { emit: t }) {
    const a = computed(() => {
      const h2 = e.type === "range", k = e.type === "color";
      return {
        "form-range": h2,
        "form-control": k || !e.plaintext && !h2,
        "form-control-color": k,
        "form-control-plaintext": e.plaintext && !h2 && !k,
        [`form-control-${e.size}`]: !!e.size,
        "is-valid": e.state === true,
        "is-invalid": e.state === false
      };
    }), l = computed(
      () => Qt.includes(e.type) ? e.type : "text"
    ), { input: n, computedId: i, computedAriaInvalid: f, onInput: d, onChange: v, onBlur: b, focus: g, blur: B } = Ta(e, t);
    return {
      classes: a,
      localType: l,
      input: n,
      computedId: i,
      computedAriaInvalid: f,
      onInput: d,
      onChange: v,
      onBlur: b,
      focus: g,
      blur: B
    };
  }
});
var es = ["id", "name", "form", "type", "disabled", "placeholder", "required", "autocomplete", "readonly", "min", "max", "step", "list", "aria-required", "aria-invalid"];
function ts(e, t, a, l, n, i) {
  return openBlock(), createElementBlock("input", mergeProps({
    id: e.computedId,
    ref: "input",
    class: e.classes,
    name: e.name || void 0,
    form: e.form || void 0,
    type: e.localType,
    disabled: e.disabled,
    placeholder: e.placeholder,
    required: e.required,
    autocomplete: e.autocomplete || void 0,
    readonly: e.readonly || e.plaintext,
    min: e.min,
    max: e.max,
    step: e.step,
    list: e.type !== "password" ? e.list : void 0,
    "aria-required": e.required ? "true" : void 0,
    "aria-invalid": e.computedAriaInvalid
  }, e.$attrs, {
    onInput: t[0] || (t[0] = (f) => e.onInput(f)),
    onChange: t[1] || (t[1] = (f) => e.onChange(f)),
    onBlur: t[2] || (t[2] = (f) => e.onBlur(f))
  }), null, 16, es);
}
var as = ke(Qo, [["render", ts]]);
var ls = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "value", "aria-required"];
var ns = ["for"];
var Ua = defineComponent({
  __name: "BFormRadio",
  props: {
    ariaLabel: null,
    ariaLabelledBy: null,
    form: null,
    id: null,
    name: null,
    size: null,
    autofocus: { default: false },
    modelValue: { type: [Boolean, String, Array, Object, Number], default: void 0 },
    plain: { default: false },
    button: { default: false },
    switch: { default: false },
    disabled: { default: false },
    buttonVariant: { default: "secondary" },
    inline: { default: false },
    required: { default: false },
    state: { default: void 0 },
    value: { type: [String, Boolean, Object, Number], default: true }
  },
  emits: ["input", "change", "update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "autofocus")), n = r(toRef(a, "plain")), i = r(toRef(a, "button")), f = r(toRef(a, "switch")), d = r(toRef(a, "disabled")), v = r(toRef(a, "inline")), b = r(toRef(a, "required")), g = r(toRef(a, "state")), B = ye(toRef(a, "id"), "form-check"), h2 = ref(null), k = ref(false), w = computed({
      get: () => Array.isArray(a.modelValue) ? a.modelValue[0] : a.modelValue,
      set: (S) => {
        const A = S ? a.value : false, I = Array.isArray(a.modelValue) ? [A] : A;
        t("input", I), t("change", I), t("update:modelValue", I);
      }
    }), y = computed(() => Array.isArray(a.modelValue) ? (a.modelValue || []).find((S) => S === a.value) : JSON.stringify(a.modelValue) === JSON.stringify(a.value)), V = reactive({
      plain: toRef(n, "value"),
      button: toRef(i, "value"),
      inline: toRef(v, "value"),
      switch: toRef(f, "value"),
      size: toRef(a, "size"),
      state: toRef(g, "value"),
      buttonVariant: toRef(a, "buttonVariant")
    }), $ = ha(V), z = ya(V), L = Ba(V);
    return onMounted(() => {
      l.value && h2.value.focus();
    }), (S, A) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(unref($))
    }, [
      withDirectives(createBaseVNode("input", mergeProps({ id: unref(B) }, S.$attrs, {
        ref_key: "input",
        ref: h2,
        "onUpdate:modelValue": A[0] || (A[0] = (I) => isRef(w) ? w.value = I : null),
        class: unref(z),
        type: "radio",
        disabled: unref(d),
        required: !!e.name && !!unref(b),
        name: e.name,
        form: e.form,
        "aria-label": e.ariaLabel,
        "aria-labelledby": e.ariaLabelledBy,
        value: e.value,
        "aria-required": e.name && unref(b) ? true : void 0,
        onFocus: A[1] || (A[1] = (I) => k.value = true),
        onBlur: A[2] || (A[2] = (I) => k.value = false)
      }), null, 16, ls), [
        [vModelRadio, unref(w)]
      ]),
      S.$slots.default || !unref(n) ? (openBlock(), createElementBlock("label", {
        key: 0,
        for: unref(B),
        class: normalizeClass([unref(L), { active: unref(y), focus: k.value }])
      }, [
        renderSlot(S.$slots, "default")
      ], 10, ns)) : createCommentVNode("", true)
    ], 2));
  }
});
var os = ["id"];
var ss = ["innerHTML"];
var rs = ["textContent"];
var is = defineComponent({
  __name: "BFormRadioGroup",
  props: {
    size: null,
    form: null,
    id: null,
    name: null,
    modelValue: { type: [String, Boolean, Array, Object, Number], default: "" },
    ariaInvalid: { default: void 0 },
    autofocus: { default: false },
    buttonVariant: { default: "secondary" },
    buttons: { default: false },
    disabled: { default: false },
    disabledField: { default: "disabled" },
    htmlField: { default: "html" },
    options: { default: () => [] },
    plain: { default: false },
    required: { default: false },
    stacked: { default: false },
    state: { default: void 0 },
    textField: { default: "text" },
    validated: { default: false },
    valueField: { default: "value" }
  },
  emits: ["input", "update:modelValue", "change"],
  setup(e, { emit: t }) {
    const a = e;
    r(toRef(a, "autofocus"));
    const l = r(toRef(a, "buttons")), n = r(toRef(a, "disabled"));
    r(toRef(a, "plain"));
    const i = r(toRef(a, "required")), f = r(toRef(a, "stacked")), d = r(toRef(a, "state")), v = r(toRef(a, "validated")), b = useSlots(), g = "BFormRadio", B = ye(toRef(a, "id"), "radio"), h2 = ye(toRef(a, "name"), "checkbox"), k = computed({
      get: () => a.modelValue,
      set: (z) => {
        t("input", z), t("update:modelValue", z), t("change", z);
      }
    }), w = computed(
      () => (b.first ? nt(b.first(), g, n.value) : []).concat(a.options.map((z) => Sa(z, a))).concat(b.default ? nt(b.default(), g, n.value) : []).map((z, L) => Ca(z, L, a, h2, B)).map((z) => ({
        ...z
      }))
    ), y = reactive({
      required: toRef(i, "value"),
      ariaInvalid: toRef(a, "ariaInvalid"),
      state: toRef(d, "value"),
      validated: toRef(v, "value"),
      buttons: toRef(l, "value"),
      stacked: toRef(f, "value"),
      size: toRef(a, "size")
    }), V = $a(y), $ = ka(y);
    return (z, L) => (openBlock(), createElementBlock("div", mergeProps(unref(V), {
      id: unref(B),
      role: "radiogroup",
      class: [unref($), "bv-no-focus-ring"],
      tabindex: "-1"
    }), [
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(w), (S, A) => (openBlock(), createBlock(Ua, mergeProps({
        key: A,
        modelValue: unref(k),
        "onUpdate:modelValue": L[0] || (L[0] = (I) => isRef(k) ? k.value = I : null)
      }, S.props), {
        default: withCtx(() => [
          S.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: S.html
          }, null, 8, ss)) : (openBlock(), createElementBlock("span", {
            key: 1,
            textContent: toDisplayString(S.text)
          }, null, 8, rs))
        ]),
        _: 2
      }, 1040, ["modelValue"]))), 128))
    ], 16, os));
  }
});
var us = ["value", "disabled"];
var Ht = defineComponent({
  __name: "BFormSelectOption",
  props: {
    value: null,
    disabled: { default: false }
  },
  setup(e) {
    const a = r(toRef(e, "disabled"));
    return (l, n) => (openBlock(), createElementBlock("option", {
      value: e.value,
      disabled: unref(a)
    }, [
      renderSlot(l.$slots, "default")
    ], 8, us));
  }
});
var ds = ["label"];
var Xa = defineComponent({
  __name: "BFormSelectOptionGroup",
  props: {
    label: null,
    disabledField: { default: "disabled" },
    htmlField: { default: "html" },
    options: { default: () => [] },
    textField: { default: "text" },
    valueField: { default: "value" }
  },
  setup(e) {
    const t = e, a = computed(
      () => zt(t.options, "BFormSelectOptionGroup", t)
    );
    return (l, n) => (openBlock(), createElementBlock("optgroup", { label: e.label }, [
      renderSlot(l.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(a), (i, f) => (openBlock(), createBlock(Ht, mergeProps({
        key: `option_${f}`,
        value: i.value,
        disabled: i.disabled
      }, l.$attrs, {
        innerHTML: i.html || i.text
      }), null, 16, ["value", "disabled", "innerHTML"]))), 128)),
      renderSlot(l.$slots, "default")
    ], 8, ds));
  }
});
var cs = ["id", "name", "form", "multiple", "size", "disabled", "required", "aria-required", "aria-invalid"];
var fs = defineComponent({
  __name: "BFormSelect",
  props: {
    ariaInvalid: { default: void 0 },
    autofocus: { default: false },
    disabled: { default: false },
    disabledField: { default: "disabled" },
    form: null,
    htmlField: { default: "html" },
    id: null,
    labelField: { default: "label" },
    multiple: { default: false },
    name: null,
    options: { default: () => [] },
    optionsField: { default: "options" },
    plain: { default: false },
    required: { default: false },
    selectSize: { default: 0 },
    size: null,
    state: { default: void 0 },
    textField: { default: "text" },
    valueField: { default: "value" },
    modelValue: { default: "" }
  },
  emits: ["input", "update:modelValue", "change"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = r(toRef(l, "autofocus")), i = r(toRef(l, "disabled")), f = r(toRef(l, "multiple")), d = r(toRef(l, "plain")), v = r(toRef(l, "required")), b = r(toRef(l, "state")), g = ref(), B = ye(toRef(l, "id"), "input"), h2 = () => {
      nextTick(() => {
        var S;
        n.value && ((S = g.value) == null || S.focus());
      });
    };
    onMounted(h2), onActivated(h2);
    const k = computed(() => ({
      "form-control": d.value,
      [`form-control-${l.size}`]: l.size && d.value,
      "form-select": !d.value,
      [`form-select-${l.size}`]: l.size && !d.value,
      "is-valid": b.value === true,
      "is-invalid": b.value === false
    })), w = computed(() => {
      if (l.selectSize || d.value)
        return l.selectSize;
    }), y = computed(
      () => ct(l.ariaInvalid, b.value)
    ), V = computed(
      () => zt(l.options, "BFormSelect", l)
    ), $ = computed({
      get() {
        return l.modelValue;
      },
      set(S) {
        a("change", S), a("update:modelValue", S), a("input", S);
      }
    });
    return t({
      blur: () => {
        var S;
        i.value || (S = g.value) == null || S.blur();
      },
      focus: () => {
        var S;
        i.value || (S = g.value) == null || S.focus();
      }
    }), (S, A) => withDirectives((openBlock(), createElementBlock("select", mergeProps({
      id: unref(B),
      ref_key: "input",
      ref: g
    }, S.$attrs, {
      "onUpdate:modelValue": A[0] || (A[0] = (I) => isRef($) ? $.value = I : null),
      class: unref(k),
      name: e.name,
      form: e.form || void 0,
      multiple: unref(f) || void 0,
      size: unref(w),
      disabled: unref(i),
      required: unref(v),
      "aria-required": unref(v) ? true : void 0,
      "aria-invalid": unref(y)
    }), [
      renderSlot(S.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(V), (I, M) => (openBlock(), createElementBlock(Fragment, null, [
        Array.isArray(I.options) ? (openBlock(), createBlock(Xa, {
          key: `option_${M}`,
          label: I.label,
          options: I.options
        }, null, 8, ["label", "options"])) : (openBlock(), createBlock(Ht, {
          key: `option2_${M}`,
          value: I.value,
          disabled: I.disabled,
          innerHTML: I.html || I.text
        }, null, 8, ["value", "disabled", "innerHTML"]))
      ], 64))), 256)),
      renderSlot(S.$slots, "default")
    ], 16, cs)), [
      [vModelSelect, unref($)]
    ]);
  }
});
var vs = ["id"];
var Ka = defineComponent({
  __name: "BFormTag",
  props: {
    id: null,
    title: null,
    disabled: { default: false },
    noRemove: { default: false },
    pill: { default: false },
    removeLabel: { default: "Remove tag" },
    tag: { default: "span" },
    variant: { default: "secondary" }
  },
  emits: ["remove"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "disabled")), n = r(toRef(a, "noRemove")), i = r(toRef(a, "pill")), f = useSlots(), d = computed(
      () => {
        var B, h2, k;
        return (k = ((h2 = (B = f.default) == null ? void 0 : B.call(f)[0].children) == null ? void 0 : h2.toString()) || a.title) != null ? k : "";
      }
    ), v = ye(toRef(a, "id")), b = computed(() => `${v.value}taglabel__`), g = computed(() => [
      `bg-${a.variant}`,
      {
        "text-dark": ["warning", "info", "light"].includes(a.variant),
        "rounded-pill": i.value,
        disabled: l.value
      }
    ]);
    return (B, h2) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: unref(v),
      title: unref(d),
      class: normalizeClass(["badge b-form-tag d-inline-flex align-items-center mw-100", unref(g)]),
      "aria-labelledby": unref(b)
    }, {
      default: withCtx(() => [
        createBaseVNode("span", {
          id: unref(b),
          class: "b-form-tag-content flex-grow-1 text-truncate"
        }, [
          renderSlot(B.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(unref(d)), 1)
          ])
        ], 8, vs),
        !unref(l) && !unref(n) ? (openBlock(), createBlock(Ge, {
          key: 0,
          "aria-keyshortcuts": "Delete",
          type: "button",
          "aria-label": e.removeLabel,
          class: "b-form-tag-remove",
          white: !["warning", "info", "light"].includes(e.variant),
          "aria-describedby": unref(b),
          "aria-controls": e.id,
          onClick: h2[0] || (h2[0] = (k) => t("remove", unref(d)))
        }, null, 8, ["aria-label", "white", "aria-describedby", "aria-controls"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["id", "title", "class", "aria-labelledby"]));
  }
});
var ms = ["id"];
var bs = ["id", "for", "aria-live"];
var gs = ["id", "aria-live"];
var ps = ["id"];
var hs = ["aria-controls"];
var ys = {
  role: "group",
  class: "d-flex"
};
var Bs = ["id", "disabled", "value", "type", "placeholder", "form", "required"];
var $s = ["disabled"];
var ks = {
  "aria-live": "polite",
  "aria-atomic": "true"
};
var Ss = {
  key: 0,
  class: "d-block invalid-feedback"
};
var Cs = {
  key: 1,
  class: "form-text text-muted"
};
var ws = {
  key: 2,
  class: "form-text text-muted"
};
var Ts = ["name", "value"];
var Vs = defineComponent({
  __name: "BFormTags",
  props: {
    addButtonText: { default: "Add" },
    addButtonVariant: { default: "outline-secondary" },
    addOnChange: { default: false },
    autofocus: { default: false },
    disabled: { default: false },
    duplicateTagText: { default: "Duplicate tag(s)" },
    inputAttrs: null,
    inputClass: null,
    inputId: null,
    inputType: { default: "text" },
    invalidTagText: { default: "Invalid tag(s)" },
    form: null,
    limit: null,
    limitTagsText: { default: "Tag limit reached" },
    modelValue: { default: () => [] },
    name: null,
    noAddOnEnter: { default: false },
    noOuterFocus: { default: false },
    noTagRemove: { default: false },
    placeholder: { default: "Add tag..." },
    removeOnDelete: { default: false },
    required: { default: false },
    separator: null,
    state: { default: void 0 },
    size: null,
    tagClass: null,
    tagPills: { default: false },
    tagRemoveLabel: null,
    tagRemovedLabel: { default: "Tag removed" },
    tagValidator: { type: Function, default: () => true },
    tagVariant: { default: "secondary" }
  },
  emits: ["update:modelValue", "input", "tag-state", "focus", "focusin", "focusout", "blur"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "addOnChange")), n = r(toRef(a, "autofocus")), i = r(toRef(a, "disabled")), f = r(toRef(a, "noAddOnEnter")), d = r(toRef(a, "noOuterFocus")), v = r(toRef(a, "noTagRemove")), b = r(toRef(a, "removeOnDelete")), g = r(toRef(a, "required")), B = r(toRef(a, "state")), h2 = r(toRef(a, "tagPills")), k = ref(null), w = ye(), y = computed(() => a.inputId || `${w.value}input__`);
    onMounted(() => {
      te(), a.modelValue.length > 0 && (z.value = true);
    }), onActivated(() => te()), watch(
      () => a.modelValue,
      (U) => {
        V.value = U;
      }
    );
    const V = ref(a.modelValue), $ = ref(""), z = ref(false), L = ref(false), S = ref(""), A = ref([]), I = ref([]), M = ref([]), _ = computed(() => ({
      [`form-control-${a.size}`]: a.size !== void 0,
      disabled: i.value,
      focus: L.value,
      "is-invalid": B.value === false,
      "is-valid": B.value === true
    })), T = computed(() => V.value.includes($.value)), D = computed(
      () => $.value === "" ? false : !a.tagValidator($.value)
    ), q = computed(() => V.value.length === a.limit), le = computed(() => !D.value && !T.value), te = () => {
      var U;
      n.value && ((U = k.value) == null || U.focus());
    }, K = (U) => {
      if (i.value) {
        U.target.blur();
        return;
      }
      t("focusin", U);
    }, de = (U) => {
      i.value || d.value || (L.value = true, t("focus", U));
    }, se = (U) => {
      L.value = false, t("blur", U);
    }, Q = (U) => {
      var G, be;
      const ee = typeof U == "string" ? U : U.target.value;
      if (z.value = false, ((G = a.separator) == null ? void 0 : G.includes(ee.charAt(0))) && ee.length > 0) {
        k.value && (k.value.value = "");
        return;
      }
      if ($.value = ee, (be = a.separator) != null && be.includes(ee.charAt(ee.length - 1))) {
        ue(ee.slice(0, ee.length - 1));
        return;
      }
      A.value = a.tagValidator(ee) && !T.value ? [ee] : [], I.value = a.tagValidator(ee) ? [] : [ee], M.value = T.value ? [ee] : [], t("tag-state", A.value, I.value, M.value);
    }, Z = (U) => {
      l.value && (Q(U), T.value || ue($.value));
    }, Se = (U) => {
      if (U.key === "Enter" && !f.value) {
        ue($.value);
        return;
      }
      (U.key === "Backspace" || U.key === "Delete") && b.value && $.value === "" && z.value && V.value.length > 0 ? $e(V.value[V.value.length - 1]) : z.value = true;
    }, ue = (U) => {
      var G;
      if (U = (U || $.value).trim(), U === "" || T.value || !a.tagValidator(U) || a.limit && q.value)
        return;
      const ee = [...a.modelValue, U];
      $.value = "", z.value = true, t("update:modelValue", ee), t("input", ee), (G = k.value) == null || G.focus();
    }, $e = (U) => {
      var G;
      const ee = V.value.indexOf((G = U == null ? void 0 : U.toString()) != null ? G : "");
      S.value = V.value.splice(ee, 1).toString(), t("update:modelValue", V.value);
    }, Ae = computed(() => {
      const {
        addButtonText: U,
        addButtonVariant: ee,
        duplicateTagText: G,
        inputAttrs: be,
        form: xe,
        inputType: mt,
        invalidTagText: bt,
        limitTagsText: gt,
        limit: Ne,
        placeholder: C,
        separator: E,
        size: ne,
        tagClass: N,
        tagRemoveLabel: he,
        tagVariant: fe
      } = a;
      return {
        addButtonText: U,
        addButtonVariant: ee,
        addTag: ue,
        disableAddButton: le,
        disabled: i.value,
        duplicateTagText: G,
        duplicateTags: M,
        form: xe,
        inputAttrs: {
          ...be,
          disabled: i.value,
          form: xe,
          id: y,
          value: $
        },
        inputHandlers: {
          input: Q,
          keydown: Se,
          change: Z
        },
        inputId: y,
        inputType: mt,
        invalidTagText: bt,
        invalidTags: I,
        isDuplicate: T,
        isInvalid: D,
        isLimitReached: q,
        limitTagsText: gt,
        limit: Ne,
        noTagRemove: v.value,
        placeholder: C,
        removeTag: $e,
        required: g.value,
        separator: E,
        size: ne,
        state: B.value,
        tagClass: N,
        tagPills: h2.value,
        tagRemoveLabel: he,
        tagVariant: fe,
        tags: V
      };
    });
    return (U, ee) => (openBlock(), createElementBlock("div", {
      id: unref(w),
      class: normalizeClass(["b-form-tags form-control h-auto", unref(_)]),
      role: "group",
      tabindex: "-1",
      onFocusin: K,
      onFocusout: ee[1] || (ee[1] = (G) => t("focusout", G))
    }, [
      createBaseVNode("output", {
        id: `${unref(w)}selected_tags__`,
        class: "visually-hidden",
        role: "status",
        for: unref(y),
        "aria-live": L.value ? "polite" : "off",
        "aria-atomic": "true",
        "aria-relevant": "additions text"
      }, toDisplayString(V.value.join(", ")), 9, bs),
      createBaseVNode("div", {
        id: `${unref(w)}removed_tags__`,
        role: "status",
        "aria-live": L.value ? "assertive" : "off",
        "aria-atomic": "true",
        class: "visually-hidden"
      }, " (" + toDisplayString(e.tagRemovedLabel) + ") " + toDisplayString(S.value), 9, gs),
      renderSlot(U.$slots, "default", normalizeProps(guardReactiveProps(unref(Ae))), () => [
        createBaseVNode("ul", {
          id: `${unref(w)}tag_list__`,
          class: "b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(V.value, (G) => renderSlot(U.$slots, "tag", normalizeProps(guardReactiveProps({ tag: G, tagClass: e.tagClass, tagVariant: e.tagVariant, tagPillsBoolean: unref(h2), removeTag: $e })), () => [
            (openBlock(), createBlock(Ka, {
              key: G,
              class: normalizeClass(e.tagClass),
              tag: "li",
              variant: e.tagVariant,
              pill: unref(h2),
              onRemove: $e
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(G), 1)
              ]),
              _: 2
            }, 1032, ["class", "variant", "pill"]))
          ])), 256)),
          createBaseVNode("li", {
            role: "none",
            "aria-live": "off",
            class: "b-from-tags-field flex-grow-1",
            "aria-controls": `${unref(w)}tag_list__`
          }, [
            createBaseVNode("div", ys, [
              createBaseVNode("input", mergeProps({
                id: unref(y),
                ref_key: "input",
                ref: k,
                disabled: unref(i),
                value: $.value,
                type: e.inputType,
                placeholder: e.placeholder,
                class: "b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0",
                style: { outline: "currentcolor none 0px", "min-width": "5rem" }
              }, e.inputAttrs, {
                form: e.form,
                required: unref(g),
                onInput: Q,
                onChange: Z,
                onKeydown: Se,
                onFocus: de,
                onBlur: se
              }), null, 16, Bs),
              unref(le) ? (openBlock(), createElementBlock("button", {
                key: 0,
                type: "button",
                class: normalizeClass(["btn b-form-tags-button py-0", [
                  `btn-${e.addButtonVariant}`,
                  {
                    "disabled invisible": $.value.length === 0
                  },
                  e.inputClass
                ]]),
                style: { "font-size": "90%" },
                disabled: unref(i) || $.value.length === 0 || unref(q),
                onClick: ee[0] || (ee[0] = (G) => ue($.value))
              }, [
                renderSlot(U.$slots, "add-button-text", {}, () => [
                  createTextVNode(toDisplayString(e.addButtonText), 1)
                ])
              ], 10, $s)) : createCommentVNode("", true)
            ])
          ], 8, hs)
        ], 8, ps),
        createBaseVNode("div", ks, [
          unref(D) ? (openBlock(), createElementBlock("div", Ss, toDisplayString(e.invalidTagText) + ": " + toDisplayString($.value), 1)) : createCommentVNode("", true),
          unref(T) ? (openBlock(), createElementBlock("small", Cs, toDisplayString(e.duplicateTagText) + ": " + toDisplayString($.value), 1)) : createCommentVNode("", true),
          V.value.length === e.limit ? (openBlock(), createElementBlock("small", ws, "Tag limit reached")) : createCommentVNode("", true)
        ])
      ]),
      e.name ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(V.value, (G) => (openBlock(), createElementBlock("input", {
        key: G,
        type: "hidden",
        name: e.name,
        value: G
      }, null, 8, Ts))), 128)) : createCommentVNode("", true)
    ], 42, ms));
  }
});
var _s = defineComponent({
  props: {
    ...wa,
    noResize: { type: [Boolean, String], default: false },
    rows: { type: [String, Number], required: false, default: 2 },
    wrap: { type: String, default: "soft" }
  },
  emits: ["update:modelValue", "change", "blur", "input"],
  setup(e, { emit: t }) {
    const a = r(toRef(e, "noResize")), l = computed(() => ({
      "form-control": !e.plaintext,
      "form-control-plaintext": e.plaintext,
      [`form-control-${e.size}`]: !!e.size,
      "is-valid": e.state === true,
      "is-invalid": e.state === false
    })), n = computed(
      () => a.value ? { resize: "none" } : void 0
    ), { input: i, computedId: f, computedAriaInvalid: d, onInput: v, onChange: b, onBlur: g, focus: B, blur: h2 } = Ta(e, t);
    return {
      input: i,
      computedId: f,
      computedAriaInvalid: d,
      onInput: v,
      onChange: b,
      onBlur: g,
      focus: B,
      blur: h2,
      classes: l,
      computedStyles: n
    };
  }
});
var As = ["id", "name", "form", "disabled", "placeholder", "required", "autocomplete", "readonly", "aria-required", "aria-invalid", "rows", "wrap"];
function xs(e, t, a, l, n, i) {
  return openBlock(), createElementBlock("textarea", mergeProps({
    id: e.computedId,
    ref: "input",
    class: e.classes,
    name: e.name || void 0,
    form: e.form || void 0,
    disabled: e.disabled,
    placeholder: e.placeholder,
    required: e.required,
    autocomplete: e.autocomplete || void 0,
    readonly: e.readonly || e.plaintext,
    "aria-required": e.required ? "true" : void 0,
    "aria-invalid": e.computedAriaInvalid,
    rows: e.rows,
    style: e.computedStyles,
    wrap: e.wrap || void 0
  }, e.$attrs, {
    onInput: t[0] || (t[0] = (f) => e.onInput(f)),
    onChange: t[1] || (t[1] = (f) => e.onChange(f)),
    onBlur: t[2] || (t[2] = (f) => e.onBlur(f))
  }), null, 16, As);
}
var Is = ke(_s, [["render", xs]]);
var Fs = {
  key: 0,
  class: "input-group-text"
};
var Os = ["innerHTML"];
var zs = { key: 1 };
var Ps = {
  key: 0,
  class: "input-group-text"
};
var Ns = ["innerHTML"];
var Ls = { key: 1 };
var Hs = defineComponent({
  __name: "BInputGroup",
  props: {
    append: null,
    appendHtml: null,
    id: null,
    prepend: null,
    prependHtml: null,
    size: null,
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, a = computed(() => ({
      "input-group-sm": t.size === "sm",
      "input-group-lg": t.size === "lg"
    })), l = computed(() => !!t.append || !!t.appendHtml), n = computed(() => !!t.prepend || !!t.prependHtml);
    return (i, f) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      class: normalizeClass(["input-group", unref(a)]),
      role: "group"
    }, {
      default: withCtx(() => [
        renderSlot(i.$slots, "prepend", {}, () => [
          unref(n) ? (openBlock(), createElementBlock("span", Fs, [
            e.prependHtml ? (openBlock(), createElementBlock("span", {
              key: 0,
              innerHTML: e.prependHtml
            }, null, 8, Os)) : (openBlock(), createElementBlock("span", zs, toDisplayString(e.prepend), 1))
          ])) : createCommentVNode("", true)
        ]),
        renderSlot(i.$slots, "default"),
        renderSlot(i.$slots, "append", {}, () => [
          unref(l) ? (openBlock(), createElementBlock("span", Ps, [
            e.appendHtml ? (openBlock(), createElementBlock("span", {
              key: 0,
              innerHTML: e.appendHtml
            }, null, 8, Ns)) : (openBlock(), createElementBlock("span", Ls, toDisplayString(e.append), 1))
          ])) : createCommentVNode("", true)
        ])
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var Ja = defineComponent({
  __name: "BInputGroupText",
  props: {
    tag: { default: "div" },
    text: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "input-group-text" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var Et = defineComponent({
  __name: "BInputGroupAddon",
  props: {
    isText: { default: false }
  },
  setup(e) {
    const a = r(toRef(e, "isText"));
    return (l, n) => unref(a) ? (openBlock(), createBlock(Ja, { key: 0 }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    })) : renderSlot(l.$slots, "default", { key: 1 });
  }
});
var Es = defineComponent({
  __name: "BInputGroupAppend",
  props: {
    isText: { default: false }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(Et, { "is-text": e.isText }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }, 8, ["is-text"]));
  }
});
var Ds = defineComponent({
  __name: "BInputGroupPrepend",
  props: {
    isText: { default: false }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(Et, { "is-text": e.isText }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }, 8, ["is-text"]));
  }
});
var Ya = Symbol();
var Rs = defineComponent({
  __name: "BListGroup",
  props: {
    flush: { default: false },
    horizontal: { type: [Boolean, String], default: false },
    numbered: { default: false },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "flush")), l = r(toRef(t, "numbered")), n = computed(() => {
      const f = a.value ? false : t.horizontal;
      return {
        "list-group-flush": a.value,
        "list-group-horizontal": f === true,
        [`list-group-horizontal-${f}`]: typeof f == "string",
        "list-group-numbered": l.value
      };
    }), i = computed(() => l.value === true ? "ol" : t.tag);
    return provide(Ya, {
      numbered: l.value
    }), (f, d) => (openBlock(), createBlock(resolveDynamicComponent(unref(i)), {
      class: normalizeClass(["list-group", unref(n)])
    }, {
      default: withCtx(() => [
        renderSlot(f.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var qs = defineComponent({
  __name: "BListGroupItem",
  props: {
    action: { default: false },
    active: { default: false },
    button: { default: false },
    disabled: { default: false },
    href: null,
    tag: { default: "div" },
    target: { default: "_self" },
    to: null,
    variant: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "action")), l = r(toRef(t, "active")), n = r(toRef(t, "button")), i = r(toRef(t, "disabled")), f = useAttrs(), d = inject(Ya, null), v = computed(() => !n.value && (!!t.href || !!t.to)), b = computed(
      () => d != null && d.numbered ? "li" : n.value ? "button" : v.value ? Ce : t.tag
    ), g = computed(() => {
      const h2 = a.value || v.value || n.value || ["a", "router-link", "button", "b-link"].includes(t.tag);
      return {
        [`list-group-item-${t.variant}`]: t.variant !== void 0,
        "list-group-item-action": h2,
        active: l.value,
        disabled: i.value
      };
    }), B = computed(() => {
      const h2 = {};
      return n.value && ((!f || !f.type) && (h2.type = "button"), i.value && (h2.disabled = true)), h2;
    });
    return (h2, k) => (openBlock(), createBlock(resolveDynamicComponent(unref(b)), mergeProps({
      class: ["list-group-item", unref(g)],
      "aria-current": unref(l) ? true : null,
      "aria-disabled": unref(i) ? true : null,
      target: unref(v) ? e.target : null,
      href: unref(n) ? null : e.href,
      to: unref(n) ? null : e.to
    }, unref(B)), {
      default: withCtx(() => [
        renderSlot(h2.$slots, "default")
      ]),
      _: 3
    }, 16, ["class", "aria-current", "aria-disabled", "target", "href", "to"]));
  }
});
var js = ["id"];
var Ms = {
  inheritAttrs: false
};
var Gs = defineComponent({
  ...Ms,
  __name: "BModal",
  props: {
    bodyBgVariant: null,
    bodyClass: null,
    bodyTextVariant: null,
    busy: { default: false },
    lazy: { default: false },
    buttonSize: { default: "md" },
    cancelDisabled: { default: false },
    cancelTitle: { default: "Cancel" },
    cancelVariant: { default: "secondary" },
    centered: { default: false },
    contentClass: null,
    dialogClass: null,
    footerBgVariant: null,
    footerBorderVariant: null,
    footerClass: null,
    footerTextVariant: null,
    fullscreen: { type: [Boolean, String], default: false },
    headerBgVariant: null,
    headerBorderVariant: null,
    headerClass: null,
    headerCloseLabel: { default: "Close" },
    headerCloseWhite: { default: false },
    headerTextVariant: null,
    hideBackdrop: { default: false },
    hideFooter: { default: false },
    hideHeader: { default: false },
    hideHeaderClose: { default: false },
    id: null,
    modalClass: null,
    modelValue: { default: false },
    noCloseOnBackdrop: { default: false },
    noCloseOnEsc: { default: false },
    noFade: { default: false },
    noFocus: { default: false },
    okDisabled: { default: false },
    okOnly: { default: false },
    okTitle: { default: "Ok" },
    okVariant: { default: "primary" },
    scrollable: { default: false },
    show: { default: false },
    size: null,
    title: null,
    titleClass: null,
    titleSrOnly: { default: false },
    titleTag: { default: "h5" }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden", "hide-prevented", "ok", "cancel"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "busy")), n = r(toRef(a, "lazy")), i = r(toRef(a, "cancelDisabled")), f = r(toRef(a, "centered")), d = r(toRef(a, "headerCloseWhite")), v = r(toRef(a, "hideBackdrop")), b = r(toRef(a, "hideFooter")), g = r(toRef(a, "hideHeader")), B = r(toRef(a, "hideHeaderClose")), h2 = r(toRef(a, "modelValue")), k = r(toRef(a, "noCloseOnBackdrop")), w = r(toRef(a, "noCloseOnEsc")), y = r(toRef(a, "noFade")), V = r(toRef(a, "noFocus")), $ = r(toRef(a, "okDisabled")), z = r(toRef(a, "okOnly")), L = r(toRef(a, "scrollable")), S = r(toRef(a, "show")), A = r(toRef(a, "titleSrOnly")), I = ref(false), M = ye(toRef(a, "id"), "modal"), _ = ref(), T = ref(), D = computed(() => [
      {
        fade: !y.value,
        show: S.value
      },
      a.modalClass
    ]), q = computed(() => [
      {
        "modal-fullscreen": a.fullscreen === true,
        [`modal-fullscreen-${a.fullscreen}-down`]: typeof a.fullscreen == "string",
        [`modal-${a.size}`]: a.size !== void 0,
        "modal-dialog-centered": f.value,
        "modal-dialog-scrollable": L.value
      },
      a.dialogClass
    ]), le = computed(() => [
      {
        [`bg-${a.bodyBgVariant}`]: a.bodyBgVariant,
        [`text-${a.bodyTextVariant}`]: a.bodyTextVariant
      },
      a.bodyClass
    ]), te = computed(() => [
      {
        [`bg-${a.headerBgVariant}`]: a.headerBgVariant,
        [`border-${a.headerBorderVariant}`]: a.headerBorderVariant,
        [`text-${a.headerTextVariant}`]: a.headerTextVariant
      },
      a.headerClass
    ]), K = computed(() => [
      {
        [`bg-${a.footerBgVariant}`]: a.footerBgVariant,
        [`border-${a.footerBorderVariant}`]: a.footerBorderVariant,
        [`text-${a.footerTextVariant}`]: a.footerTextVariant
      },
      a.footerClass
    ]), de = computed(() => [
      {
        ["visually-hidden"]: A.value
      },
      a.titleClass
    ]), se = computed(() => i.value || l.value), Q = computed(() => $.value || l.value);
    me(_, "shown.bs.modal", (G) => Z(G)), me(_, "hidden.bs.modal", (G) => Se(G)), me(_, "show.bs.modal", (G) => ue(G)), me(_, "hide.bs.modal", (G) => $e(G));
    const Z = (G) => {
      t("shown", G), n.value === true && (I.value = true), h2.value === false && t("update:modelValue", true), G.target.focus();
    }, Se = (G) => {
      t("hidden", G), n.value === true && (I.value = false), h2.value === true && t("update:modelValue", false);
      const be = document.querySelector(".modal");
      be && be.focus();
    }, ue = (G) => {
      t("show", G);
    }, $e = (G) => {
      t("hide", G);
    }, Ae = () => {
      h2.value && t("update:modelValue", true), ee().show();
    }, U = () => {
      h2.value && t("update:modelValue", false), ee().hide();
    }, ee = () => (T.value !== void 0 || (T.value = new Modal(_.value, {
      backdrop: false,
      keyboard: !w.value,
      focus: !V.value
    })), T.value);
    return onMounted(() => {
      h2.value && ee().show();
    }), onBeforeUnmount(() => {
      var G;
      (G = T.value) == null || G.dispose(), T.value = void 0;
    }), watch(
      () => a.noCloseOnBackdrop,
      (G) => {
        ee()._config.backdrop = a.hideBackdrop ? false : G ? "static" : !a.hideBackdrop;
      }
    ), watch(
      () => a.noCloseOnEsc,
      (G) => {
        ee()._config.keyboard = !G;
      }
    ), watch(
      () => h2.value,
      (G) => {
        nextTick(() => {
          G ? Ae() : U();
        });
      }
    ), (G, be) => (openBlock(), createBlock(Teleport, { to: "body" }, [
      createBaseVNode("div", mergeProps({
        id: unref(M),
        ref_key: "element",
        ref: _,
        class: ["modal", unref(D)],
        tabindex: "-1"
      }, G.$attrs), [
        createBaseVNode("div", {
          class: normalizeClass(["modal-dialog", unref(q)])
        }, [
          !unref(n) || unref(n) && I.value || unref(n) && unref(h2) === true ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(["modal-content", e.contentClass])
          }, [
            unref(g) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(["modal-header", unref(te)])
            }, [
              renderSlot(G.$slots, "header", {}, () => [
                (openBlock(), createBlock(resolveDynamicComponent(e.titleTag), {
                  class: normalizeClass(["modal-title", unref(de)])
                }, {
                  default: withCtx(() => [
                    renderSlot(G.$slots, "title", {}, () => [
                      createTextVNode(toDisplayString(e.title), 1)
                    ], true)
                  ]),
                  _: 3
                }, 8, ["class"])),
                unref(B) ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  G.$slots["header-close"] ? (openBlock(), createElementBlock("button", {
                    key: 0,
                    type: "button",
                    "data-bs-dismiss": "modal",
                    onClick: be[0] || (be[0] = (xe) => U())
                  }, [
                    renderSlot(G.$slots, "header-close", {}, void 0, true)
                  ])) : (openBlock(), createBlock(Ge, {
                    key: 1,
                    type: "button",
                    "aria-label": e.headerCloseLabel,
                    "data-bs-dismiss": "modal",
                    white: unref(d),
                    onClick: be[1] || (be[1] = (xe) => U())
                  }, null, 8, ["aria-label", "white"]))
                ], 64))
              ], true)
            ], 2)),
            createBaseVNode("div", {
              class: normalizeClass(["modal-body", unref(le)])
            }, [
              renderSlot(G.$slots, "default", {}, void 0, true)
            ], 2),
            unref(b) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(["modal-footer", unref(K)])
            }, [
              renderSlot(G.$slots, "footer", {}, () => [
                unref(z) ? createCommentVNode("", true) : (openBlock(), createBlock(Ke, {
                  key: 0,
                  type: "button",
                  class: "btn",
                  disabled: unref(se),
                  size: e.buttonSize,
                  variant: e.cancelVariant,
                  onClick: be[2] || (be[2] = (xe) => (U(), t("cancel")))
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(e.cancelTitle), 1)
                  ]),
                  _: 1
                }, 8, ["disabled", "size", "variant"])),
                createVNode(Ke, {
                  type: "button",
                  class: "btn",
                  disabled: unref(Q),
                  size: e.buttonSize,
                  variant: e.okVariant,
                  onClick: be[3] || (be[3] = (xe) => (U(), t("ok")))
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(e.okTitle), 1)
                  ]),
                  _: 1
                }, 8, ["disabled", "size", "variant"])
              ], true)
            ], 2))
          ], 2)) : createCommentVNode("", true)
        ], 2),
        unref(v) === false ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "modal-backdrop fade show",
          onClick: be[4] || (be[4] = withModifiers((xe) => unref(k) === false && U(), ["prevent"]))
        })) : createCommentVNode("", true)
      ], 16, js)
    ]));
  }
});
var Ws = ke(Gs, [["__scopeId", "data-v-f7e6d64f"]]);
var Us = defineComponent({
  __name: "BNav",
  props: {
    align: null,
    cardHeader: { default: false },
    fill: { default: false },
    justified: { default: false },
    pills: { default: false },
    small: { default: false },
    tabs: { default: false },
    tag: { default: "ul" },
    vertical: { default: false }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "cardHeader")), l = r(toRef(t, "fill")), n = r(toRef(t, "justified")), i = r(toRef(t, "pills")), f = r(toRef(t, "small")), d = r(toRef(t, "tabs")), v = r(toRef(t, "vertical")), b = computed(() => ({
      "nav-tabs": d.value,
      "nav-pills": i.value && !d.value,
      "card-header-tabs": !v.value && a.value && d.value,
      "card-header-pills": !v.value && a.value && i.value && !d.value,
      "flex-column": v.value,
      "nav-fill": !v.value && l.value,
      "nav-justified": !v.value && n.value,
      [`justify-content-${t.align}`]: !v.value && t.align !== void 0,
      small: f.value
    }));
    return (g, B) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["nav", unref(b)])
    }, {
      default: withCtx(() => [
        renderSlot(g.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Xs = defineComponent({
  __name: "BNavForm",
  props: {
    role: null,
    id: null,
    floating: { default: false },
    novalidate: { default: false },
    validated: { default: false }
  },
  emits: ["submit"],
  setup(e, { emit: t }) {
    const a = e, l = (i) => t("submit", i), n = computed(() => ({
      floating: a.floating,
      role: a.role,
      id: a.id,
      novalidate: a.novalidate,
      validated: a.validated
    }));
    return (i, f) => (openBlock(), createBlock(Ma, mergeProps(unref(n), {
      class: "d-flex",
      onSubmit: withModifiers(l, ["prevent"])
    }), {
      default: withCtx(() => [
        renderSlot(i.$slots, "default")
      ]),
      _: 3
    }, 16, ["onSubmit"]));
  }
});
var Ks = defineComponent({
  components: { BLink: Ce },
  props: {
    ...it(De, ["event", "routerTag"])
  },
  setup(e) {
    return { disabledBoolean: r(toRef(e, "disabled")) };
  }
});
var Js = { class: "nav-item" };
function Ys(e, t, a, l, n, i) {
  const f = resolveComponent("b-link");
  return openBlock(), createElementBlock("li", Js, [
    createVNode(f, mergeProps({ class: "nav-link" }, e.$props, {
      "active-class": "active",
      tabindex: e.disabledBoolean ? -1 : void 0,
      "aria-disabled": e.disabledBoolean ? true : void 0
    }), {
      default: withCtx(() => [
        renderSlot(e.$slots, "default")
      ]),
      _: 3
    }, 16, ["tabindex", "aria-disabled"])
  ]);
}
var Zs = ke(Ks, [["render", Ys]]);
var Qs = { class: "nav-item dropdown" };
var er = defineComponent({
  __name: "BNavItemDropdown",
  props: {
    id: null,
    text: null,
    toggleClass: null,
    size: null,
    offset: null,
    autoClose: { type: [Boolean, String], default: true },
    dark: { type: Boolean, default: false },
    dropleft: { type: Boolean, default: false },
    dropright: { type: Boolean, default: false },
    dropup: { type: Boolean, default: false },
    right: { type: Boolean, default: false },
    left: { type: [Boolean, String], default: false },
    split: { type: Boolean, default: false },
    splitVariant: null,
    noCaret: { type: Boolean, default: false },
    variant: { default: "link" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("li", Qs, [
      createVNode(ja, mergeProps(t.$props, { "is-nav": "" }), createSlots({ _: 2 }, [
        renderList(t.$slots, (l, n) => ({
          name: n,
          fn: withCtx((i) => [
            renderSlot(t.$slots, n, normalizeProps(guardReactiveProps(i || {})))
          ])
        }))
      ]), 1040)
    ]));
  }
});
var tr = { class: "navbar-text" };
var ar = defineComponent({
  __name: "BNavText",
  props: {
    text: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("li", tr, [
      renderSlot(t.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(e.text), 1)
      ])
    ]));
  }
});
var lr = defineComponent({
  __name: "BNavbar",
  props: {
    fixed: null,
    print: { default: false },
    sticky: null,
    tag: { default: "nav" },
    toggleable: { type: [Boolean, String], default: false },
    dark: { default: false },
    variant: null,
    container: { type: [String, Boolean], default: "fluid" }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "print")), l = r(toRef(t, "dark")), n = computed(
      () => t.tag === "nav" ? void 0 : "navigation"
    ), i = computed(
      () => typeof t.toggleable == "string" ? `navbar-expand-${t.toggleable}` : t.toggleable === false ? "navbar-expand" : void 0
    ), f = computed(
      () => t.container === false ? void 0 : t.container === true ? "container" : `container-${t.container}`
    ), d = computed(() => ({
      "d-print": a.value,
      [`sticky-${t.sticky}`]: t.sticky !== void 0,
      "navbar-dark": l.value,
      [`bg-${t.variant}`]: t.variant !== void 0,
      [`fixed-${t.fixed}`]: t.fixed !== void 0,
      [`${i.value}`]: i.value !== void 0
    }));
    return (v, b) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["navbar", unref(d)]),
      role: unref(n)
    }, {
      default: withCtx(() => [
        e.container !== false ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(f))
        }, [
          renderSlot(v.$slots, "default")
        ], 2)) : renderSlot(v.$slots, "default", { key: 1 })
      ]),
      _: 3
    }, 8, ["class", "role"]));
  }
});
var ea = it(De, ["event", "routerTag"]);
var nr = defineComponent({
  components: {
    BLink: Ce
  },
  props: {
    tag: { type: String, default: "div" },
    ...ea
  },
  setup(e) {
    const t = computed(() => Xe(e)), a = computed(() => t.value ? Ce : e.tag);
    return {
      props: t.value ? Ot(e, ea) : {},
      computedTag: a
    };
  }
});
function or(e, t, a, l, n, i) {
  return openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({ class: "navbar-brand" }, e.props), {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 16);
}
var sr = ke(nr, [["render", or]]);
var rr = defineComponent({
  __name: "BNavbarNav",
  props: {
    align: null,
    fill: { default: false },
    justified: { default: false },
    small: { default: false },
    tag: { default: "ul" }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "fill")), l = r(toRef(t, "justified")), n = r(toRef(t, "small")), i = computed(() => ({
      "nav-fill": a.value,
      "nav-justified": l.value,
      [`justify-content-${t.align}`]: t.align !== void 0,
      small: n.value
    }));
    return (f, d) => (openBlock(), createElementBlock("ul", {
      class: normalizeClass(["navbar-nav", unref(i)])
    }, [
      renderSlot(f.$slots, "default")
    ], 2));
  }
});
var ir = createBaseVNode("span", { class: "navbar-toggler-icon" }, null, -1);
var ur = defineComponent({
  __name: "BNavbarToggle",
  props: {
    disabled: { default: false },
    label: { default: "Toggle navigation" },
    target: null
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "disabled")), n = computed(() => ({
      disabled: l.value,
      "aria-label": a.label
    })), i = computed(() => ({
      disabled: l.value
    })), f = (d) => {
      l.value || t("click", d);
    };
    return (d, v) => withDirectives((openBlock(), createElementBlock("button", mergeProps({
      class: ["navbar-toggler", unref(i)],
      type: "button"
    }, unref(n), { onClick: f }), [
      renderSlot(d.$slots, "default", {}, () => [
        ir
      ])
    ], 16)), [
      [unref(Pt), unref(l) ? void 0 : e.target]
    ]);
  }
});
var dr = ["data-bs-backdrop", "data-bs-scroll"];
var cr = {
  key: 0,
  class: "offcanvas-header"
};
var fr = {
  id: "offcanvasLabel",
  class: "offcanvas-title"
};
var vr = { class: "offcanvas-body" };
var mr = { key: 1 };
var br = defineComponent({
  __name: "BOffcanvas",
  props: {
    dismissLabel: { default: "Close" },
    modelValue: { default: false },
    bodyScrolling: { default: false },
    backdrop: { default: true },
    placement: { default: "start" },
    title: null,
    noHeaderClose: { default: false },
    noHeader: { default: false }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "modelValue")), n = r(toRef(a, "bodyScrolling")), i = r(toRef(a, "backdrop")), f = r(toRef(a, "noHeaderClose")), d = r(toRef(a, "noHeader")), v = ref(), b = ref();
    me(v, "shown.bs.offcanvas", () => t("shown")), me(v, "hidden.bs.offcanvas", () => t("hidden"));
    const g = () => {
      t("show"), t("update:modelValue", true);
    }, B = () => {
      t("hide"), t("update:modelValue", false);
    };
    me(v, "show.bs.offcanvas", () => {
      g();
    }), me(v, "hide.bs.offcanvas", () => {
      B();
    }), onMounted(() => {
      var k;
      b.value = new Offcanvas(v.value), l.value && ((k = b.value) == null || k.show(v.value));
    });
    const h2 = computed(() => ({
      [`offcanvas-${a.placement}`]: !!a.placement
    }));
    return watch(
      () => l.value,
      (k) => {
        var w, y;
        k ? (w = b.value) == null || w.show(v.value) : (y = b.value) == null || y.hide();
      }
    ), (k, w) => (openBlock(), createElementBlock("div", {
      ref_key: "element",
      ref: v,
      class: normalizeClass(["offcanvas", unref(h2)]),
      tabindex: "-1",
      "aria-labelledby": "offcanvasLabel",
      "data-bs-backdrop": unref(i),
      "data-bs-scroll": unref(n)
    }, [
      unref(d) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", cr, [
        renderSlot(k.$slots, "header", normalizeProps(guardReactiveProps({ visible: e.modelValue, placement: e.placement, hide: B })), () => [
          createBaseVNode("h5", fr, [
            renderSlot(k.$slots, "title", {}, () => [
              createTextVNode(toDisplayString(e.title), 1)
            ])
          ]),
          unref(f) ? createCommentVNode("", true) : (openBlock(), createBlock(Ge, {
            key: 0,
            type: "button",
            class: "text-reset",
            "data-bs-dismiss": "offcanvas",
            "aria-label": e.dismissLabel
          }, null, 8, ["aria-label"]))
        ])
      ])),
      createBaseVNode("div", vr, [
        renderSlot(k.$slots, "default")
      ]),
      k.$slots.footer ? (openBlock(), createElementBlock("div", mr, [
        renderSlot(k.$slots, "footer", normalizeProps(guardReactiveProps({ visible: e.modelValue, placement: e.placement, hide: B })))
      ])) : createCommentVNode("", true)
    ], 10, dr));
  }
});
var gr = defineComponent({
  __name: "BOverlay",
  props: {
    bgColor: null,
    blur: { default: "2px" },
    fixed: { default: false },
    noCenter: { default: false },
    noFade: { default: false },
    noWrap: { default: false },
    opacity: { default: 0.85 },
    overlayTag: { default: "div" },
    rounded: { type: [Boolean, String], default: false },
    show: { default: false },
    spinnerSmall: { default: false },
    spinnerType: { default: "border" },
    spinnerVariant: null,
    variant: { default: "light" },
    wrapTag: { default: "div" },
    zIndex: { default: 10 }
  },
  emits: ["click", "hidden", "shown"],
  setup(e, { emit: t }) {
    const a = e, l = { top: 0, left: 0, bottom: 0, right: 0 }, n = r(toRef(a, "fixed")), i = r(toRef(a, "noCenter")), f = r(toRef(a, "noFade")), d = r(toRef(a, "noWrap")), v = r(toRef(a, "show")), b = r(toRef(a, "spinnerSmall")), g = computed(
      () => a.rounded === true || a.rounded === "" ? "rounded" : a.rounded === false ? "" : `rounded-${a.rounded}`
    ), B = computed(
      () => a.variant && !a.bgColor ? `bg-${a.variant}` : ""
    ), h2 = computed(() => v.value ? "true" : null), k = computed(() => ({
      type: a.spinnerType || void 0,
      variant: a.spinnerVariant || void 0,
      small: b.value
    })), w = computed(() => ({
      ...l,
      zIndex: a.zIndex || 10
    })), y = computed(() => [
      "b-overlay",
      {
        "position-absolute": !d.value || !n.value,
        "position-fixed": d.value && n.value
      }
    ]), V = computed(() => [B.value, g.value]), $ = computed(() => ({
      ...l,
      opacity: a.opacity,
      backgroundColor: a.bgColor || void 0,
      backdropFilter: blur ? `blur(${blur})` : void 0
    })), z = computed(
      () => i.value ? l : {
        top: "50%",
        left: "50%",
        transform: "translateX(-50%) translateY(-50%)"
      }
    );
    return (L, S) => (openBlock(), createBlock(resolveDynamicComponent(e.wrapTag), {
      class: "b-overlay-wrap position-relative",
      "aria-busy": unref(h2)
    }, {
      default: withCtx(() => [
        renderSlot(L.$slots, "default"),
        createVNode(Lt, {
          "no-fade": unref(f),
          "trans-props": { enterToClass: "show" },
          name: "fade",
          onOnAfterEnter: S[1] || (S[1] = (A) => t("shown")),
          onOnAfterLeave: S[2] || (S[2] = (A) => t("hidden"))
        }, {
          default: withCtx(() => [
            unref(v) ? (openBlock(), createBlock(resolveDynamicComponent(e.overlayTag), {
              key: 0,
              class: normalizeClass(unref(y)),
              style: normalizeStyle(unref(w)),
              onClick: S[0] || (S[0] = (A) => t("click", A))
            }, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass(["position-absolute", unref(V)]),
                  style: normalizeStyle(unref($))
                }, null, 6),
                createBaseVNode("div", {
                  class: "position-absolute",
                  style: normalizeStyle(unref(z))
                }, [
                  renderSlot(L.$slots, "overlay", normalizeProps(guardReactiveProps(unref(k))), () => [
                    createVNode(ft, normalizeProps(guardReactiveProps(unref(k))), null, 16)
                  ])
                ], 4)
              ]),
              _: 3
            }, 8, ["class", "style"])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["no-fade"])
      ]),
      _: 3
    }, 8, ["aria-busy"]));
  }
});
var pr = 5;
var Za = 20;
var Qa = 0;
var _e = 3;
var hr = "ellipsis-text";
var yr = "first-text";
var Br = "last-text";
var $r = "next-text";
var kr = "page";
var Sr = "prev-text";
var ta = (e) => Math.max(je(e) || Za, 1);
var aa = (e) => Math.max(je(e) || Qa, 0);
var Cr = (e, t) => {
  const a = je(e) || 1;
  return a > t ? t : a < 1 ? 1 : a;
};
var wr = defineComponent({
  name: "BPagination",
  props: {
    align: { type: String, default: "start" },
    ariaControls: { type: String, required: false },
    ariaLabel: { type: String, default: "Pagination" },
    disabled: { type: [Boolean, String], default: false },
    ellipsisClass: { type: [Array, String], default: () => [] },
    ellipsisText: { type: String, default: "â¦" },
    firstClass: { type: [Array, String], default: () => [] },
    firstNumber: { type: [Boolean, String], default: false },
    firstText: { type: String, default: "Â«" },
    hideEllipsis: { type: [Boolean, String], default: false },
    hideGotoEndButtons: { type: [Boolean, String], default: false },
    labelFirstPage: { type: String, default: "Go to first page" },
    labelLastPage: { type: String, default: "Go to last page" },
    labelNextPage: { type: String, default: "Go to next page" },
    labelPage: { type: String, default: "Go to page" },
    labelPrevPage: { type: String, default: "Go to previous page" },
    lastClass: { type: [Array, String], default: () => [] },
    lastNumber: { type: [Boolean, String], default: false },
    lastText: { type: String, default: "Â»" },
    limit: { type: Number, default: pr },
    modelValue: { type: Number, default: 1 },
    nextClass: { type: [Array, String], default: () => [] },
    nextText: { type: String, default: "âº" },
    pageClass: { type: [Array, String], default: () => [] },
    perPage: { type: Number, default: Za },
    pills: { type: [Boolean, String], default: false },
    prevClass: { type: [Array, String], default: () => [] },
    prevText: { type: String, default: "â¹" },
    size: { type: String, required: false },
    totalRows: { type: Number, default: Qa }
  },
  emits: ["update:modelValue", "page-click"],
  setup(e, { emit: t, slots: a }) {
    const l = r(toRef(e, "disabled")), n = r(toRef(e, "firstNumber")), i = r(toRef(e, "hideEllipsis")), f = r(toRef(e, "hideGotoEndButtons")), d = r(toRef(e, "lastNumber")), v = r(toRef(e, "pills")), b = $l(toRef(e, "align")), g = computed(
      () => Math.ceil(aa(e.totalRows) / ta(e.perPage))
    ), B = computed(() => {
      let S;
      return g.value - e.modelValue + 2 < e.limit && e.limit > _e ? S = g.value - k.value + 1 : S = e.modelValue - Math.floor(k.value / 2), S < 1 ? S = 1 : S > g.value - k.value && (S = g.value - k.value + 1), e.limit <= _e && d.value && g.value === S + k.value - 1 && (S = Math.max(S - 1, 1)), S;
    }), h2 = computed(() => {
      const S = g.value - e.modelValue;
      let A = false;
      return S + 2 < e.limit && e.limit > _e ? e.limit > _e && (A = true) : e.limit > _e && (A = !!(!i.value || n.value)), B.value <= 1 && (A = false), A && n.value && B.value < 4 && (A = false), A;
    }), k = computed(() => {
      let S = e.limit;
      return g.value <= e.limit ? S = g.value : e.modelValue < e.limit - 1 && e.limit > _e ? ((!i.value || d.value) && (S = e.limit - (n.value ? 0 : 1)), S = Math.min(S, e.limit)) : g.value - e.modelValue + 2 < e.limit && e.limit > _e ? (!i.value || n.value) && (S = e.limit - (d.value ? 0 : 1)) : e.limit > _e && (S = e.limit - (i.value ? 0 : 2)), S;
    }), w = computed(() => {
      const S = g.value - k.value;
      let A = false;
      e.modelValue < e.limit - 1 && e.limit > _e ? (!i.value || d.value) && (A = true) : e.limit > _e && (A = !!(!i.value || d.value)), B.value > S && (A = false);
      const I = B.value + k.value - 1;
      return A && d.value && I > g.value - 3 && (A = false), A;
    }), y = reactive({
      pageSize: ta(e.perPage),
      totalRows: aa(e.totalRows),
      numberOfPages: g.value
    }), V = (S, A) => {
      if (A === e.modelValue)
        return;
      const { target: I } = S, M = new ut("page-click", {
        cancelable: true,
        vueTarget: this,
        target: I
      });
      t("page-click", M, A), !M.defaultPrevented && t("update:modelValue", A);
    }, $ = computed(() => e.size ? `pagination-${e.size}` : ""), z = computed(() => v.value ? "b-pagination-pills" : "");
    watch(
      () => e.modelValue,
      (S) => {
        const A = Cr(S, g.value);
        A !== e.modelValue && t("update:modelValue", A);
      }
    ), watch(y, (S, A) => {
      S != null && (A.pageSize !== S.pageSize && A.totalRows === S.totalRows || A.numberOfPages !== S.numberOfPages && e.modelValue > A.numberOfPages) && t("update:modelValue", 1);
    });
    const L = computed(() => {
      const S = [];
      for (let A = 0; A < k.value; A++)
        S.push({ number: B.value + A, classes: null });
      return S;
    });
    return () => {
      const S = [], A = L.value.map((K) => K.number), I = (K) => K === e.modelValue, M = e.modelValue < 1, _ = e.align === "fill", T = (K, de, se, Q, Z, Se) => {
        const ue = l.value || I(Se) || M || K < 1 || K > g.value, $e = K < 1 ? 1 : K > g.value ? g.value : K, Ae = { disabled: ue, page: $e, index: $e - 1 }, U = Te(se, Ae, a) || Q || "";
        return h(
          "li",
          {
            class: [
              "page-item",
              {
                disabled: ue,
                "flex-fill": _,
                "d-flex": _ && !ue
              },
              Z
            ]
          },
          h(
            ue ? "span" : "button",
            {
              class: ["page-link", { "flex-grow-1": !ue && _ }],
              "aria-label": de,
              "aria-controls": e.ariaControls || null,
              "aria-disabled": ue ? "true" : null,
              role: "menuitem",
              type: ue ? null : "button",
              tabindex: ue ? null : "-1",
              onClick: (ee) => {
                ue || V(ee, $e);
              }
            },
            U
          )
        );
      }, D = (K) => h(
        "li",
        {
          class: [
            "page-item",
            "disabled",
            "bv-d-xs-down-none",
            _ ? "flex-fill" : "",
            e.ellipsisClass
          ],
          role: "separator",
          key: `ellipsis-${K ? "last" : "first"}`
        },
        [
          h(
            "span",
            { class: ["page-link"] },
            Te(hr, {}, a) || e.ellipsisText || "..."
          )
        ]
      ), q = (K, de) => {
        const se = I(K.number) && !M, Q = l.value ? null : se || M && de === 0 ? "0" : "-1", Z = {
          active: se,
          disabled: l.value,
          page: K.number,
          index: K.number - 1,
          content: K.number
        }, Se = Te(kr, Z, a) || K.number, ue = h(
          l.value ? "span" : "button",
          {
            class: ["page-link", { "flex-grow-1": !l.value && _ }],
            "aria-controls": e.ariaControls || null,
            "aria-disabled": l.value ? "true" : null,
            "aria-label": e.labelPage ? `${e.labelPage} ${K.number}` : null,
            role: "menuitemradio",
            type: l.value ? null : "button",
            tabindex: Q,
            onClick: ($e) => {
              l.value || V($e, K.number);
            }
          },
          Se
        );
        return h(
          "li",
          {
            class: [
              "page-item",
              {
                disabled: l.value,
                active: se,
                "flex-fill": _,
                "d-flex": _ && !l.value
              },
              e.pageClass
            ],
            role: "presentation",
            key: `page-${K.number}`
          },
          ue
        );
      };
      if (!f.value && !n.value) {
        const K = T(
          1,
          e.labelFirstPage,
          yr,
          e.firstText,
          e.firstClass,
          1
        );
        S.push(K);
      }
      const le = T(
        e.modelValue - 1,
        e.labelFirstPage,
        Sr,
        e.prevText,
        e.prevClass,
        1
      );
      S.push(le), n.value && A[0] !== 1 && S.push(q({ number: 1 }, 0)), h2.value && S.push(D(false)), L.value.forEach((K, de) => {
        const se = h2.value && n.value && A[0] !== 1 ? 1 : 0;
        S.push(q(K, de + se));
      }), w.value && S.push(D(true)), d.value && A[A.length - 1] !== g.value && S.push(q({ number: g.value }, -1));
      const te = T(
        e.modelValue + 1,
        e.labelNextPage,
        $r,
        e.nextText,
        e.nextClass,
        g.value
      );
      if (S.push(te), !d.value && !f.value) {
        const K = T(
          g.value,
          e.labelLastPage,
          Br,
          e.lastText,
          e.lastClass,
          g.value
        );
        S.push(K);
      }
      return h(
        "ul",
        {
          class: ["pagination", $.value, b.value, z.value],
          role: "menubar",
          "aria-disabled": l.value,
          "aria-label": e.ariaLabel || null
        },
        S
      );
    };
  }
});
var we = defineComponent({
  __name: "BPlaceholder",
  props: {
    tag: { default: "span" },
    width: null,
    cols: null,
    variant: null,
    size: null,
    animation: null
  },
  setup(e) {
    const t = e, a = computed(
      () => t.width === void 0 ? void 0 : typeof t.width == "number" ? t.width.toString() : t.width.includes("%") ? t.width.replaceAll("%", "") : t.width
    ), l = computed(
      () => t.cols === void 0 ? void 0 : typeof t.cols == "number" ? t.cols.toString() : t.cols
    ), n = computed(() => ({
      [`col-${l.value}`]: l.value !== void 0 && a.value === void 0,
      [`bg-${t.variant}`]: t.variant !== void 0,
      [`placeholder-${t.size}`]: t.size !== void 0,
      [`placeholder-${t.animation}`]: t.animation !== void 0
    })), i = computed(
      () => a.value === void 0 ? void 0 : `width: ${a.value}%;`
    );
    return (f, d) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["placeholder", unref(n)]),
      style: normalizeStyle(unref(i))
    }, null, 8, ["class", "style"]));
  }
});
var el = defineComponent({
  __name: "BPlaceholderButton",
  props: {
    tag: { default: "div" },
    width: null,
    cols: null,
    variant: { default: "primary" },
    animation: null
  },
  setup(e) {
    const t = e, a = computed(() => ["btn", `btn-${t.variant}`, "disabled"]), l = computed(() => ({
      animation: t.animation,
      width: t.width,
      cols: t.cols,
      tag: t.tag
    }));
    return (n, i) => (openBlock(), createBlock(we, mergeProps({ class: unref(a) }, unref(l)), null, 16, ["class"]));
  }
});
var Tr = defineComponent({
  __name: "BPlaceholderCard",
  props: {
    noHeader: { default: false },
    headerWidth: { default: 100 },
    headerVariant: null,
    headerAnimation: null,
    headerSize: null,
    noFooter: { default: false },
    footerWidth: { default: 100 },
    footerVariant: null,
    footerAnimation: null,
    footerSize: null,
    animation: null,
    size: null,
    variant: null,
    noButton: { default: false },
    imgBottom: { default: false },
    imgSrc: null,
    imgBlankColor: { default: "#868e96" },
    imgHeight: { default: 100 },
    noImg: { default: false }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "noButton")), l = r(toRef(t, "noHeader")), n = r(toRef(t, "noFooter")), i = r(toRef(t, "noImg")), f = r(toRef(t, "imgBottom")), d = computed(() => ({
      width: t.headerWidth,
      variant: t.headerVariant,
      animation: t.headerAnimation,
      size: t.headerSize
    })), v = computed(() => ({
      width: t.footerWidth,
      animation: t.footerAnimation,
      size: a.value ? t.footerSize : void 0,
      variant: t.footerVariant
    })), b = computed(() => ({
      blank: !t.imgSrc,
      blankColor: t.imgBlankColor,
      height: t.imgSrc ? void 0 : t.imgHeight,
      src: t.imgSrc,
      top: !f.value,
      bottom: f.value
    }));
    return (g, B) => (openBlock(), createBlock(Ha, { "img-bottom": unref(f) }, createSlots({
      default: withCtx(() => [
        renderSlot(g.$slots, "default", {}, () => [
          createVNode(we, { cols: "7" }),
          createVNode(we, { cols: "4" }),
          createVNode(we, { cols: "4" }),
          createVNode(we, { cols: "6" }),
          createVNode(we, { cols: "8" })
        ])
      ]),
      _: 2
    }, [
      unref(i) ? void 0 : {
        name: "img",
        fn: withCtx(() => [
          renderSlot(g.$slots, "img", {}, () => [
            createVNode(ot, normalizeProps(guardReactiveProps(unref(b))), null, 16)
          ])
        ]),
        key: "0"
      },
      unref(l) ? void 0 : {
        name: "header",
        fn: withCtx(() => [
          renderSlot(g.$slots, "header", {}, () => [
            createVNode(we, normalizeProps(guardReactiveProps(unref(d))), null, 16)
          ])
        ]),
        key: "1"
      },
      unref(n) ? void 0 : {
        name: "footer",
        fn: withCtx(() => [
          renderSlot(g.$slots, "footer", {}, () => [
            unref(a) ? (openBlock(), createBlock(we, normalizeProps(mergeProps({ key: 1 }, unref(v))), null, 16)) : (openBlock(), createBlock(el, normalizeProps(mergeProps({ key: 0 }, unref(v))), null, 16))
          ])
        ]),
        key: "2"
      }
    ]), 1032, ["img-bottom"]));
  }
});
var vt = defineComponent({
  __name: "BTableSimple",
  props: {
    bordered: { default: false },
    borderless: { default: false },
    borderVariant: null,
    captionTop: { default: false },
    dark: { default: false },
    hover: { default: false },
    responsive: { type: [Boolean, String], default: false },
    stacked: { type: [Boolean, String], default: false },
    striped: { default: false },
    small: { default: false },
    tableClass: null,
    tableVariant: null,
    stickyHeader: { default: false }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "captionTop")), l = r(toRef(t, "borderless")), n = r(toRef(t, "bordered")), i = r(toRef(t, "dark")), f = r(toRef(t, "hover")), d = r(toRef(t, "small")), v = r(toRef(t, "striped")), b = r(toRef(t, "stickyHeader")), g = computed(() => [
      "table",
      "b-table",
      {
        "table-bordered": n.value,
        "table-borderless": l.value,
        [`border-${t.borderVariant}`]: t.borderVariant !== void 0,
        "caption-top": a.value,
        "table-dark": i.value,
        "table-hover": f.value,
        "b-table-stacked": typeof t.stacked == "boolean" && t.stacked,
        [`b-table-stacked-${t.stacked}`]: typeof t.stacked == "string",
        "table-striped": v.value,
        "table-sm": d.value,
        [`table-${t.tableVariant}`]: t.tableVariant !== void 0
      },
      t.tableClass
    ]), B = computed(() => [
      {
        "table-responsive": t.responsive === true,
        [`table-responsive-${t.responsive}`]: typeof t.responsive == "string",
        "b-table-sticky-header": b.value
      }
    ]);
    return (h2, k) => e.responsive ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(unref(B))
    }, [
      createBaseVNode("table", {
        role: "table",
        class: normalizeClass(unref(g))
      }, [
        renderSlot(h2.$slots, "default")
      ], 2)
    ], 2)) : (openBlock(), createElementBlock("table", {
      key: 0,
      role: "table",
      class: normalizeClass(unref(g))
    }, [
      renderSlot(h2.$slots, "default")
    ], 2));
  }
});
var Vr = defineComponent({
  __name: "BPlaceholderTable",
  props: {
    rows: { default: 3 },
    columns: { default: 5 },
    cellWidth: { default: 100 },
    size: null,
    animation: null,
    variant: null,
    headerColumns: null,
    hideHeader: { default: false },
    headerCellWidth: { default: 100 },
    headerSize: null,
    headerAnimation: null,
    headerVariant: null,
    footerColumns: null,
    showFooter: { default: false },
    footerCellWidth: { default: 100 },
    footerSize: null,
    footerAnimation: null,
    footerVariant: null
  },
  setup(e) {
    const t = e, a = computed(
      () => typeof t.columns == "string" ? We(t.columns, 5) : t.columns
    ), l = computed(
      () => typeof t.rows == "string" ? We(t.rows, 3) : t.rows
    ), n = computed(
      () => t.headerColumns === void 0 ? a.value : typeof t.headerColumns == "string" ? We(t.headerColumns, a.value) : t.headerColumns
    ), i = computed(
      () => t.footerColumns === void 0 ? a.value : typeof t.footerColumns == "string" ? We(t.footerColumns, a.value) : t.footerColumns
    ), f = computed(() => ({
      size: t.size,
      variant: t.variant,
      animation: t.animation,
      width: t.cellWidth
    })), d = computed(() => ({
      size: t.headerSize,
      variant: t.headerVariant,
      animation: t.headerAnimation,
      width: t.headerCellWidth
    })), v = computed(() => ({
      size: t.footerSize,
      variant: t.footerVariant,
      animation: t.footerAnimation,
      width: t.footerCellWidth
    })), b = r(toRef(t, "hideHeader")), g = r(toRef(t, "showFooter"));
    return (B, h2) => (openBlock(), createBlock(vt, null, {
      default: withCtx(() => [
        unref(b) ? createCommentVNode("", true) : renderSlot(B.$slots, "thead", { key: 0 }, () => [
          createBaseVNode("thead", null, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(n), (k, w) => (openBlock(), createElementBlock("th", { key: w }, [
                createVNode(we, normalizeProps(guardReactiveProps(unref(d))), null, 16)
              ]))), 128))
            ])
          ])
        ]),
        renderSlot(B.$slots, "default", {}, () => [
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l), (k, w) => (openBlock(), createElementBlock("tr", { key: w }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(a), (y, V) => (openBlock(), createElementBlock("td", { key: V }, [
                createVNode(we, normalizeProps(guardReactiveProps(unref(f))), null, 16)
              ]))), 128))
            ]))), 128))
          ])
        ]),
        unref(g) ? renderSlot(B.$slots, "tfoot", { key: 1 }, () => [
          createBaseVNode("tfoot", null, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(i), (k, w) => (openBlock(), createElementBlock("th", { key: w }, [
                createVNode(we, normalizeProps(guardReactiveProps(unref(v))), null, 16)
              ]))), 128))
            ])
          ])
        ]) : createCommentVNode("", true)
      ]),
      _: 3
    }));
  }
});
var _r = defineComponent({
  __name: "BPlaceholderWrapper",
  props: {
    loading: { default: false }
  },
  setup(e) {
    const a = r(toRef(e, "loading"));
    return (l, n) => unref(a) ? renderSlot(l.$slots, "loading", { key: 0 }) : renderSlot(l.$slots, "default", { key: 1 });
  }
});
var Ar = defineComponent({
  props: {
    container: {
      type: [String, Object],
      default: "body"
    },
    content: { type: String },
    id: { type: String },
    customClass: { type: String, default: "" },
    noninteractive: { type: [Boolean, String], default: false },
    placement: { type: String, default: "right" },
    target: {
      type: [String, Object],
      default: void 0
    },
    title: { type: String },
    delay: { type: [Number, Object], default: 0 },
    triggers: { type: String, default: "click" },
    show: { type: [Boolean, String], default: false },
    variant: { type: String, default: void 0 },
    html: { type: [Boolean, String], default: true },
    sanitize: { type: [Boolean, String], default: false },
    offset: { type: String, default: "0" }
  },
  emits: ["show", "shown", "hide", "hidden", "inserted"],
  setup(e, { emit: t, slots: a }) {
    r(toRef(e, "noninteractive"));
    const l = r(toRef(e, "show")), n = r(toRef(e, "html")), i = r(toRef(e, "sanitize")), f = ref(), d = ref(), v = ref(), b = ref(), g = ref(), B = computed(() => ({
      [`b-popover-${e.variant}`]: e.variant !== void 0
    })), h2 = (y) => {
      if (typeof y == "string")
        return y;
      if (y instanceof HTMLElement)
        return y;
      if (typeof y < "u")
        return y.$el;
    }, k = (y) => {
      if (!!y) {
        if (typeof y == "string") {
          const V = document.getElementById(y);
          return V || void 0;
        }
        return y;
      }
    }, w = (y) => {
      d.value = k(h2(y)), d.value && (v.value = new Popover(d.value, {
        customClass: e.customClass,
        container: h2(e.container),
        trigger: e.triggers,
        placement: e.placement,
        title: e.title || a.title ? b.value : "",
        content: g.value,
        html: n.value,
        delay: e.delay,
        sanitize: i.value,
        offset: e.offset
      }));
    };
    return onMounted(() => {
      var y, V, $;
      nextTick(() => {
        w(e.target);
      }), (V = (y = f.value) == null ? void 0 : y.parentNode) == null || V.removeChild(f.value), l.value && (($ = v.value) == null || $.show());
    }), onBeforeUnmount(() => {
      var y;
      (y = v.value) == null || y.dispose();
    }), watch(
      () => e.target,
      (y) => {
        var V;
        (V = v.value) == null || V.dispose(), w(y);
      }
    ), watch(
      () => l.value,
      (y, V) => {
        var $, z;
        y !== V && (y ? ($ = v.value) == null || $.show() : (z = v.value) == null || z.hide());
      }
    ), me(d, "show.bs.popover", () => t("show")), me(d, "shown.bs.popover", () => t("shown")), me(d, "hide.bs.popover", () => t("hide")), me(d, "hidden.bs.popover", () => t("hidden")), me(d, "inserted.bs.popover", () => t("inserted")), {
      element: f,
      titleRef: b,
      contentRef: g,
      classes: B
    };
  }
});
var xr = ["id"];
var Ir = { ref: "titleRef" };
var Fr = { ref: "contentRef" };
function Or(e, t, a, l, n, i) {
  return openBlock(), createElementBlock("div", {
    id: e.id,
    ref: "element",
    class: normalizeClass(["popover b-popover", e.classes]),
    role: "tooltip",
    tabindex: "-1"
  }, [
    createBaseVNode("div", Ir, [
      renderSlot(e.$slots, "title", {}, () => [
        createTextVNode(toDisplayString(e.title), 1)
      ])
    ], 512),
    createBaseVNode("div", Fr, [
      renderSlot(e.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(e.content), 1)
      ])
    ], 512)
  ], 10, xr);
}
var zr = ke(Ar, [["render", Or]]);
var Pr = ["aria-valuenow", "aria-valuemax"];
var tl = defineComponent({
  __name: "BProgressBar",
  props: {
    animated: { default: false },
    label: null,
    labelHtml: null,
    max: null,
    precision: { default: 0 },
    showProgress: { default: false },
    showValue: { default: false },
    striped: { default: false },
    value: { default: 0 },
    variant: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "animated")), l = r(toRef(t, "showProgress")), n = r(toRef(t, "showValue")), i = r(toRef(t, "striped")), f = inject(al), d = computed(() => ({
      "progress-bar-animated": a.value || (f == null ? void 0 : f.animated),
      "progress-bar-striped": i.value || (f == null ? void 0 : f.striped) || a.value || (f == null ? void 0 : f.animated),
      [`bg-${t.variant}`]: t.variant !== void 0
    })), v = computed(
      () => typeof t.precision == "number" ? t.precision : Number.parseFloat(t.precision)
    ), b = computed(
      () => typeof t.value == "number" ? t.value : Number.parseFloat(t.value)
    ), g = computed(
      () => typeof t.max == "number" ? t.max : t.max === void 0 ? void 0 : Number.parseFloat(t.max)
    ), B = computed(
      () => t.labelHtml !== void 0 ? t.labelHtml : n.value || (f == null ? void 0 : f.showValue) ? b.value.toFixed(v.value) : l.value || (f == null ? void 0 : f.showProgress) ? (b.value * 100 / (g.value || 100)).toFixed(v.value) : t.label !== void 0 ? t.label : ""
    ), h2 = computed(
      () => f != null && f.max ? `${b.value * 100 / (typeof f.max == "number" ? f.max : Number.parseInt(f.max))}%` : t.max ? `${b.value * 100 / (typeof t.max == "number" ? t.max : Number.parseInt(t.max))}%` : typeof t.value == "string" ? t.value : `${t.value}%`
    );
    return (k, w) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["progress-bar", unref(d)]),
      role: "progressbar",
      "aria-valuenow": e.value,
      "aria-valuemin": "0",
      "aria-valuemax": e.max,
      style: normalizeStyle({ width: unref(h2) })
    }, [
      renderSlot(k.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(unref(B)), 1)
      ])
    ], 14, Pr));
  }
});
var al = Symbol();
var Nr = defineComponent({
  __name: "BProgress",
  props: {
    variant: null,
    max: null,
    height: null,
    animated: { default: false },
    precision: { default: 0 },
    showProgress: { default: false },
    showValue: { default: false },
    striped: { default: false },
    value: { default: 0 }
  },
  setup(e) {
    const t = e, a = r(toRef(t, "animated")), l = r(toRef(t, "showProgress")), n = r(toRef(t, "showValue")), i = r(toRef(t, "striped")), f = computed(() => ({
      animated: a.value,
      max: t.max,
      precision: t.precision,
      showProgress: l.value,
      showValue: n.value,
      striped: i.value,
      value: t.value,
      variant: t.variant
    }));
    return provide(al, {
      animated: a.value,
      max: t.max,
      showProgress: l.value,
      showValue: n.value,
      striped: i.value
    }), (d, v) => (openBlock(), createElementBlock("div", {
      class: "progress",
      style: normalizeStyle({ height: e.height })
    }, [
      renderSlot(d.$slots, "default", {}, () => [
        createVNode(tl, normalizeProps(guardReactiveProps(unref(f))), null, 16)
      ])
    ], 4));
  }
});
var la = dt("cols", [""], { type: [String, Number], default: null });
var Lr = defineComponent({
  name: "BRow",
  props: {
    tag: { type: String, default: "div" },
    gutterX: { type: String, default: null },
    gutterY: { type: String, default: null },
    noGutters: { type: [Boolean, String], default: false },
    alignV: { type: String, default: null },
    alignH: { type: String, default: null },
    alignContent: { type: String, default: null },
    ...la
  },
  setup(e) {
    const t = r(toRef(e, "noGutters")), a = ma(e, la, "cols", "row-cols");
    return {
      classes: computed(() => ({
        [`gx-${e.gutterX}`]: e.gutterX !== null,
        [`gy-${e.gutterY}`]: e.gutterY !== null,
        "g-0": t.value,
        [`align-items-${e.alignV}`]: e.alignV !== null,
        [`justify-content-${e.alignH}`]: e.alignH !== null,
        [`align-content-${e.alignContent}`]: e.alignContent !== null
      })),
      rowColsClasses: a
    };
  }
});
function Hr(e, t, a, l, n, i) {
  return openBlock(), createBlock(resolveDynamicComponent(e.tag), {
    class: normalizeClass(["row", [e.classes, e.rowColsClasses]])
  }, {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var Er = ke(Lr, [["render", Hr]]);
var at = defineComponent({
  __name: "BSkeleton",
  props: {
    height: null,
    width: null,
    size: null,
    animation: { default: "wave" },
    type: { default: "text" },
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => [
      `b-skeleton-${t.type}`,
      {
        [`b-skeleton-animate-${t.animation}`]: typeof t.animation == "boolean" ? false : t.animation,
        [`bg-${t.variant}`]: t.variant !== void 0
      }
    ]), l = computed(() => ({
      width: t.size || t.width,
      height: t.size || t.height
    }));
    return (n, i) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["b-skeleton", unref(a)]),
      style: normalizeStyle(unref(l))
    }, null, 6));
  }
});
var Dr = defineComponent({
  __name: "BSkeletonIcon",
  props: {
    animation: { default: "wave" }
  },
  setup(e) {
    const t = e, a = computed(() => [`b-skeleton-animate-${t.animation}`]);
    return (l, n) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["b-skeleton-icon-wrapper position-relative d-inline-block overflow-hidden", unref(a)])
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var Rr = { key: 0 };
var qr = { key: 1 };
var jr = defineComponent({
  __name: "BSkeletonTable",
  props: {
    animation: { default: "wave" },
    columns: { default: 5 },
    hideHeader: { default: false },
    rows: { default: 3 },
    showFooter: { default: false },
    tableProps: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "hideHeader")), l = r(toRef(t, "showFooter"));
    return (n, i) => (openBlock(), createBlock(vt, normalizeProps(guardReactiveProps(e.tableProps)), {
      default: withCtx(() => [
        unref(a) ? createCommentVNode("", true) : (openBlock(), createElementBlock("thead", Rr, [
          createBaseVNode("tr", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(e.columns, (f, d) => (openBlock(), createElementBlock("th", { key: d }, [
              createVNode(at)
            ]))), 128))
          ])
        ])),
        createBaseVNode("tbody", null, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(e.rows, (f, d) => (openBlock(), createElementBlock("tr", { key: d }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(e.columns, (v, b) => (openBlock(), createElementBlock("td", { key: b }, [
              createVNode(at, { width: "75%" })
            ]))), 128))
          ]))), 128))
        ]),
        unref(l) ? (openBlock(), createElementBlock("tfoot", qr, [
          createBaseVNode("tr", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(e.columns, (f, d) => (openBlock(), createElementBlock("th", { key: d }, [
              createVNode(at)
            ]))), 128))
          ])
        ])) : createCommentVNode("", true)
      ]),
      _: 1
    }, 16));
  }
});
var Mr = defineComponent({
  __name: "BSkeletonWrapper",
  props: {
    loading: { default: false }
  },
  setup(e) {
    const a = r(toRef(e, "loading"));
    return (l, n) => unref(a) ? renderSlot(l.$slots, "loading", { key: 0 }) : renderSlot(l.$slots, "default", { key: 1 });
  }
});
var Gr = () => {
  const e = (d, v) => {
    const b = [];
    return !(d != null && d.length) && (v == null ? void 0 : v.length) ? (Object.keys(v[0]).forEach((g) => b.push({ key: g, label: Dt(g) })), b) : (Array.isArray(d) && d.forEach((g) => {
      typeof g == "string" ? b.push({ key: g, label: Dt(g) }) : kl(g) && g.key && typeof g.key == "string" && b.push({ ...g });
    }), b);
  }, t = ref([]), a = (d, v, b, g) => {
    if (t.value = lt(v), "isFilterableTable" in g && g.isFilterableTable.value === true && b.filter && (t.value = i(t.value, b.filter, b.filterable), l.value && l.value(t.value)), "isSortable" in g && g.isSortable.value === true && (t.value = n(
      d,
      t.value,
      {
        key: b.sortBy,
        desc: g.sortDescBoolean.value
      },
      b.sortCompare
    )), b.perPage !== void 0) {
      const B = (b.currentPage - 1) * b.perPage;
      t.value = t.value.splice(B, b.perPage);
    }
    return t.value;
  }, l = ref(void 0), n = (d, v, b, g) => {
    if (!b || !b.key)
      return v;
    const B = b.key;
    return v.sort((h2, k) => {
      if (g !== void 0)
        return g(h2, k, b.key, b.desc);
      const w = ($) => typeof $ == "object" ? JSON.stringify($) : $;
      return w(h2[B]) > w(k[B]) ? b.desc ? -1 : 1 : w(k[B]) > w(h2[B]) ? b.desc ? 1 : -1 : 0;
    });
  }, i = (d, v, b) => d.filter(
    (g) => Object.entries(g).filter((B) => {
      const [h2, k] = B;
      return h2[0] === "_" || b.length > 0 && !b.includes(h2) ? false : (typeof k == "object" ? JSON.stringify(Object.values(k)) : typeof k == "string" ? k : k.toString()).toLowerCase().includes(v.toLowerCase());
    }).length > 0
  );
  return {
    normaliseFields: e,
    mapItems: a,
    internalItems: t,
    updateInternalItems: async (d) => {
      try {
        return t.value = await St(d), t.value;
      } catch {
        return;
      }
    },
    filterEvent: l
  };
};
var Wr = ["title", "abbr", "onClick"];
var Ur = { class: "d-inline-flex flex-nowrap align-items-center gap-1" };
var Xr = {
  key: 0,
  class: "b-table-sort-icon text-muted small"
};
var Kr = { key: 1 };
var Jr = ["onClick", "onDblclick", "onMouseenter", "onMouseleave"];
var Yr = ["colspan"];
var Zr = ["colspan"];
var Qr = { class: "d-flex align-items-center justify-content-center gap-2" };
var ei = createBaseVNode("strong", null, "Loading...", -1);
var ti = {
  key: 1,
  class: "b-table-empty-slot"
};
var ai = ["colspan"];
var li = { key: 0 };
var ni = ["title", "abbr", "onClick"];
var oi = { key: 1 };
var si = { key: 2 };
var ri = { key: 3 };
var ii = defineComponent({
  __name: "BTable",
  props: {
    align: null,
    caption: null,
    captionTop: { default: false },
    borderless: { default: false },
    bordered: { default: false },
    borderVariant: null,
    dark: { default: false },
    fields: { default: () => [] },
    footClone: { default: false },
    hover: { default: false },
    items: { default: () => [] },
    provider: null,
    sortCompare: null,
    noProvider: null,
    noProviderPaging: null,
    noProviderSorting: null,
    noProviderFiltering: null,
    responsive: { type: [Boolean, String], default: false },
    small: { default: false },
    striped: { default: false },
    variant: null,
    sortBy: null,
    sortDesc: { default: false },
    sortInternal: { default: true },
    selectable: { default: false },
    stickySelect: { default: false },
    selectHead: { type: [Boolean, String], default: true },
    selectMode: { default: "single" },
    selectionVariant: { default: "primary" },
    stickyHeader: { default: false },
    busy: { default: false },
    showEmpty: { default: false },
    perPage: null,
    currentPage: { default: 1 },
    filter: null,
    filterable: null,
    emptyText: { default: "There are no records to show" },
    emptyFilteredText: { default: "There are no records matching your request" }
  },
  emits: ["headClicked", "rowClicked", "rowDblClicked", "rowHovered", "rowUnhovered", "rowSelected", "rowUnselected", "selection", "update:busy", "update:sortBy", "update:sortDesc", "sorted", "filtered"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = r(toRef(l, "footClone")), i = r(toRef(l, "sortDesc")), f = r(toRef(l, "sortInternal")), d = r(toRef(l, "selectable")), v = r(toRef(l, "stickySelect")), b = r(toRef(l, "busy")), g = r(toRef(l, "showEmpty")), B = r(toRef(l, "showEmpty")), h2 = r(toRef(l, "showEmpty")), k = r(toRef(l, "showEmpty")), w = ref(b.value), y = useSlots(), V = computed(() => ({
      [`align-${l.align}`]: l.align !== void 0,
      "b-table-selectable": d.value,
      [`b-table-select-${l.selectMode}`]: d.value,
      "b-table-selecting user-select-none": d.value && Se.value,
      "b-table-busy": w.value,
      "b-table-sortable": se.value,
      "b-table-sort-desc": se.value && i.value === true,
      "b-table-sort-asc": se.value && i.value === false
    })), $ = computed(() => ({
      bordered: l.bordered,
      borderless: l.borderless,
      borderVariant: l.borderVariant,
      captionTop: l.captionTop,
      dark: l.dark,
      hover: l.hover,
      responsive: l.responsive,
      striped: l.striped,
      small: l.small,
      tableClass: V.value,
      tableVariant: l.variant,
      stickyHeader: l.stickyHeader
    })), z = Gr();
    z.filterEvent.value = async (C) => {
      if (I.value) {
        await Ae();
        return;
      }
      const E = await St(C);
      a("filtered", E);
    };
    const L = computed(() => z.normaliseFields(l.fields, l.items)), S = computed(
      () => L.value.length + (d.value ? 1 : 0)
    ), A = computed(() => l.filter !== void 0 && l.filter !== ""), I = computed(() => l.provider !== void 0), M = computed(() => se.value && f.value === true), _ = computed(() => I.value ? z.internalItems.value : M.value ? z.mapItems(l.fields, l.items, l, {
      isSortable: se,
      isFilterableTable: A,
      sortDescBoolean: i
    }) : l.items), T = (C) => typeof C == "string" ? Rt(C) : C.label !== void 0 ? C.label : typeof C.key == "string" ? Rt(C.key) : C.key, D = (C, E, ne = false) => {
      const N = typeof C == "string" ? C : C.key;
      a("headClicked", N, C, E, ne), Q(C);
    }, q = (C, E, ne) => {
      a("rowClicked", C, E, ne), $e(C, E, ne.shiftKey);
    }, le = (C, E, ne) => a("rowDblClicked", C, E, ne), te = (C, E, ne) => a("rowHovered", C, E, ne), K = (C, E, ne) => a("rowUnhovered", C, E, ne), de = computed(
      () => d.value && (!!l.selectHead || y.selectHead !== void 0)
    ), se = computed(
      () => l.fields.filter((C) => typeof C == "string" ? false : C.sortable).length > 0
    ), Q = (C) => {
      if (!se.value)
        return;
      const E = typeof C == "string" ? C : C.key, ne = typeof C == "string" ? false : C.sortable;
      if (se.value === true && ne === true) {
        const N = !i.value;
        E !== l.sortBy && a("update:sortBy", E), a("update:sortDesc", N), a("sorted", E, N);
      }
    }, Z = ref(/* @__PURE__ */ new Set([])), Se = computed(() => Z.value.size > 0), ue = () => {
      !d.value || a("selection", Array.from(Z.value));
    }, $e = (C, E, ne = false) => {
      if (!!d.value) {
        if (Z.value.has(C))
          Z.value.delete(C), a("rowUnselected", C);
        else if (l.selectMode === "single" && Z.value.size > 0 && (Z.value.forEach((N) => a("rowUnselected", N)), Z.value.clear()), l.selectMode === "range" && Z.value.size > 0 && ne) {
          const N = Array.from(Z.value).pop(), he = _.value.findIndex((Le) => Le === N), fe = Math.min(he, E), pt = Math.max(he, E);
          _.value.slice(fe, pt + 1).forEach((Le) => {
            Z.value.has(Le) || (Z.value.add(Le), a("rowSelected", Le));
          });
        } else
          Z.value.add(C), a("rowSelected", C);
        ue();
      }
    }, Ae = async () => {
      if (!I.value || !l.provider || w.value)
        return;
      w.value = true;
      const C = new Proxy(
        {
          currentPage: l.currentPage,
          filter: l.filter,
          sortBy: l.sortBy,
          sortDesc: l.sortDesc,
          perPage: l.perPage
        },
        {
          get(ne, N) {
            return N in ne ? ne[N] : void 0;
          },
          set() {
            return console.error("BTable provider context is a read-only object."), true;
          }
        }
      ), E = l.provider(C, z.updateInternalItems);
      if (E !== void 0) {
        if (E instanceof Promise)
          try {
            const ne = await E;
            return Array.isArray(ne) ? await z.updateInternalItems(ne) : void 0;
          } finally {
            w.value && (w.value = false);
          }
        try {
          return await z.updateInternalItems(E);
        } finally {
          w.value && (w.value = false);
        }
      }
    }, U = (C) => {
      C._showDetails = !C._showDetails;
    }, ee = (C) => [
      C.class,
      C.thClass,
      C.variant ? `table-${C.variant}` : void 0,
      {
        "b-table-sortable-column": se.value && C.sortable,
        "b-table-sticky-column": C.stickyColumn
      }
    ], G = (C, E) => [
      C.class,
      C.tdClass,
      C.variant ? `table-${C.variant}` : void 0,
      (E == null ? void 0 : E._cellVariants) && (E == null ? void 0 : E._cellVariants[C.key]) ? `table-${E == null ? void 0 : E._cellVariants[C.key]}` : void 0,
      {
        "b-table-sticky-column": C.stickyColumn
      }
    ], be = (C) => [
      C._rowVariant ? `table-${C._rowVariant}` : null,
      C._rowVariant ? `table-${C._rowVariant}` : null,
      d.value && Z.value.has(C) ? `selected table-${l.selectionVariant}` : null
    ], xe = () => {
      if (!d.value)
        return;
      const C = Z.value.size > 0 ? Array.from(Z.value) : [];
      Z.value = /* @__PURE__ */ new Set([..._.value]), Z.value.forEach((E) => {
        C.includes(E) || a("rowSelected", E);
      }), ue();
    }, mt = () => {
      !d.value || (Z.value.forEach((C) => {
        a("rowUnselected", C);
      }), Z.value = /* @__PURE__ */ new Set([]), ue());
    }, bt = (C) => {
      if (!d.value)
        return;
      const E = _.value[C];
      !E || Z.value.has(E) || (Z.value.add(E), a("rowSelected", E), ue());
    }, gt = (C) => {
      if (!d.value)
        return;
      const E = _.value[C];
      !E || !Z.value.has(E) || (Z.value.delete(E), a("rowUnselected", E), ue());
    };
    onMounted(() => {
      I.value && Ae();
    }), watch(
      () => l.filter,
      (C, E) => {
        C === E || I.value || C || St(l.items).then((ne) => a("filtered", ne));
      }
    );
    const Ne = async (C, E, ne) => {
      if (E === ne)
        return;
      const N = (Le) => l.noProvider && l.noProvider.includes(Le), he = ["currentPage", "perPage"].includes(C) && (N("paging") || B.value === true), fe = ["filter"].includes(C) && (N("filtering") || k.value === true), pt = ["sortBy", "sortDesc"].includes(C) && (N("sorting") || h2.value === true);
      he || fe || pt || await Ae();
    };
    return watch(
      () => w.value,
      () => w.value !== b.value && a("update:busy", w.value)
    ), watch(
      () => b.value,
      () => w.value !== b.value && (w.value = b.value)
    ), watch(
      () => l.filter,
      (C, E) => Ne("filter", C, E)
    ), watch(
      () => l.currentPage,
      (C, E) => Ne("currentPage", C, E)
    ), watch(
      () => l.perPage,
      (C, E) => Ne("perPage", C, E)
    ), watch(
      () => l.sortBy,
      (C, E) => Ne("sortBy", C, E)
    ), watch(
      () => l.sortDesc,
      (C, E) => Ne("sortDesc", C, E)
    ), t({
      selectAllRows: xe,
      clearSelected: mt,
      selectRow: bt,
      unselectRow: gt
    }), (C, E) => (openBlock(), createBlock(vt, normalizeProps(guardReactiveProps(unref($))), {
      default: withCtx(() => {
        var ne;
        return [
          createBaseVNode("thead", null, [
            C.$slots["thead-top"] ? renderSlot(C.$slots, "thead-top", { key: 0 }) : createCommentVNode("", true),
            createBaseVNode("tr", null, [
              unref(de) ? (openBlock(), createElementBlock("th", {
                key: 0,
                class: normalizeClass(["b-table-selection-column", {
                  "b-table-sticky-column": unref(v)
                }])
              }, [
                renderSlot(C.$slots, "select-head", {}, () => [
                  createTextVNode(toDisplayString(typeof e.selectHead == "boolean" ? "Selected" : e.selectHead), 1)
                ])
              ], 2)) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(L), (N) => (openBlock(), createElementBlock("th", mergeProps({
                key: N.key,
                scope: "col",
                class: ee(N),
                title: N.headerTitle,
                abbr: N.headerAbbr,
                style: N.thStyle
              }, N.thAttr, {
                onClick: (he) => D(N, he)
              }), [
                createBaseVNode("div", Ur, [
                  renderSlot(C.$slots, "sort-icon", {
                    field: N,
                    sortBy: e.sortBy,
                    selected: N.key === e.sortBy,
                    isDesc: unref(i),
                    direction: unref(i) ? "desc" : "asc"
                  }, () => [
                    unref(se) && N.sortable && N.key === e.sortBy ? (openBlock(), createElementBlock("span", Xr)) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("div", null, [
                    C.$slots["head(" + N.key + ")"] || C.$slots["head()"] ? renderSlot(C.$slots, C.$slots["head(" + N.key + ")"] ? "head(" + N.key + ")" : "head()", {
                      key: 0,
                      label: N.label
                    }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(T(N)), 1)
                    ], 64))
                  ])
                ])
              ], 16, Wr))), 128))
            ]),
            C.$slots["thead-sub"] ? (openBlock(), createElementBlock("tr", Kr, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(L), (N) => (openBlock(), createElementBlock("td", {
                key: N.key,
                scope: "col",
                class: normalizeClass([N.class, N.thClass, N.variant ? `table-${N.variant}` : ""])
              }, [
                C.$slots["thead-sub"] ? renderSlot(C.$slots, "thead-sub", mergeProps({
                  key: 0,
                  items: unref(L)
                }, N)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(N.label), 1)
                ], 64))
              ], 2))), 128))
            ])) : createCommentVNode("", true)
          ]),
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(_), (N, he) => (openBlock(), createElementBlock(Fragment, { key: he }, [
              createBaseVNode("tr", {
                class: normalizeClass(be(N)),
                onClick: (fe) => q(N, he, fe),
                onDblclick: (fe) => le(N, he, fe),
                onMouseenter: (fe) => te(N, he, fe),
                onMouseleave: (fe) => K(N, he, fe)
              }, [
                unref(de) ? (openBlock(), createElementBlock("td", {
                  key: 0,
                  class: normalizeClass(["b-table-selection-column", {
                    "b-table-sticky-column": unref(v)
                  }])
                }, [
                  renderSlot(C.$slots, "select-cell", {}, () => [
                    createBaseVNode("span", {
                      class: normalizeClass(Z.value.has(N) ? "text-primary" : "")
                    }, "ð¹", 2)
                  ])
                ], 2)) : createCommentVNode("", true),
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(L), (fe) => (openBlock(), createElementBlock("td", mergeProps({
                  key: fe.key
                }, fe.tdAttr, {
                  class: G(fe, N)
                }), [
                  C.$slots["cell(" + fe.key + ")"] || C.$slots["cell()"] ? renderSlot(C.$slots, C.$slots["cell(" + fe.key + ")"] ? "cell(" + fe.key + ")" : "cell()", {
                    key: 0,
                    value: N[fe.key],
                    index: he,
                    item: N,
                    field: fe,
                    items: e.items,
                    toggleDetails: () => U(N),
                    detailsShowing: N._showDetails
                  }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(N[fe.key]), 1)
                  ], 64))
                ], 16))), 128))
              ], 42, Jr),
              N._showDetails === true && C.$slots["row-details"] ? (openBlock(), createElementBlock("tr", {
                key: 0,
                class: normalizeClass(be(N))
              }, [
                createBaseVNode("td", { colspan: unref(S) }, [
                  renderSlot(C.$slots, "row-details", {
                    item: N,
                    toggleDetails: () => U(N)
                  })
                ], 8, Yr)
              ], 2)) : createCommentVNode("", true)
            ], 64))), 128)),
            w.value ? (openBlock(), createElementBlock("tr", {
              key: 0,
              class: normalizeClass(["b-table-busy-slot", { "b-table-static-busy": unref(_).length == 0 }])
            }, [
              createBaseVNode("td", { colspan: unref(S) }, [
                renderSlot(C.$slots, "table-busy", {}, () => [
                  createBaseVNode("div", Qr, [
                    createVNode(ft, { class: "align-middle" }),
                    ei
                  ])
                ])
              ], 8, Zr)
            ], 2)) : createCommentVNode("", true),
            unref(g) && unref(_).length === 0 ? (openBlock(), createElementBlock("tr", ti, [
              createBaseVNode("td", { colspan: unref(S) }, [
                renderSlot(C.$slots, "empty", {
                  items: unref(_),
                  filtered: unref(A)
                }, () => [
                  createTextVNode(toDisplayString(unref(A) ? e.emptyFilteredText : e.emptyText), 1)
                ])
              ], 8, ai)
            ])) : createCommentVNode("", true)
          ]),
          unref(n) ? (openBlock(), createElementBlock("tfoot", li, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(L), (N) => (openBlock(), createElementBlock("th", mergeProps({
                key: N.key
              }, N.thAttr, {
                scope: "col",
                class: [N.class, N.thClass, N.variant ? `table-${N.variant}` : ""],
                title: N.headerTitle,
                abbr: N.headerAbbr,
                style: N.thStyle,
                onClick: (he) => D(N, he, true)
              }), toDisplayString(N.label), 17, ni))), 128))
            ])
          ])) : C.$slots["custom-foot"] ? (openBlock(), createElementBlock("tfoot", oi, [
            renderSlot(C.$slots, "custom-foot", {
              fields: unref(L),
              items: e.items,
              columns: (ne = unref(L)) == null ? void 0 : ne.length
            })
          ])) : createCommentVNode("", true),
          C.$slots["table-caption"] ? (openBlock(), createElementBlock("caption", si, [
            renderSlot(C.$slots, "table-caption")
          ])) : e.caption ? (openBlock(), createElementBlock("caption", ri, toDisplayString(e.caption), 1)) : createCommentVNode("", true)
        ];
      }),
      _: 3
    }, 16));
  }
});
var ui = defineComponent({
  __name: "BTbody",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`thead-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("tbody", {
      role: "rowgroup",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var di = ["scope", "colspan", "rowspan", "data-label"];
var ci = { key: 0 };
var fi = defineComponent({
  __name: "BTd",
  props: {
    colspan: null,
    rowspan: null,
    stackedHeading: null,
    stickyColumn: { default: false },
    variant: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "stickyColumn")), l = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0,
      "b-table-sticky-column": a.value,
      "table-b-table-default": a.value && !t.variant
    })), n = computed(() => t.colspan ? "colspan" : t.rowspan ? "rowspan" : "col");
    return (i, f) => (openBlock(), createElementBlock("td", {
      role: "cell",
      scope: unref(n),
      class: normalizeClass(unref(l)),
      colspan: e.colspan,
      rowspan: e.rowspan,
      "data-label": e.stackedHeading
    }, [
      e.stackedHeading ? (openBlock(), createElementBlock("div", ci, [
        renderSlot(i.$slots, "default")
      ])) : renderSlot(i.$slots, "default", { key: 1 })
    ], 10, di));
  }
});
var vi = defineComponent({
  __name: "BTfoot",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("tfoot", {
      role: "rowgroup",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var mi = ["scope", "colspan", "rowspan", "data-label"];
var bi = { key: 0 };
var gi = defineComponent({
  __name: "BTh",
  props: {
    colspan: null,
    rowspan: null,
    stackedHeading: null,
    stickyColumn: { default: false },
    variant: null
  },
  setup(e) {
    const t = e, a = r(toRef(t, "stickyColumn")), l = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0,
      "b-table-sticky-column": a.value,
      "table-b-table-default": a.value && t.variant === void 0
    })), n = computed(() => t.colspan ? "colspan" : t.rowspan ? "rowspan" : "col");
    return (i, f) => (openBlock(), createElementBlock("th", {
      role: "columnheader",
      scope: unref(n),
      class: normalizeClass(unref(l)),
      colspan: e.colspan,
      rowspan: e.rowspan,
      "data-label": e.stackedHeading
    }, [
      e.stackedHeading !== void 0 ? (openBlock(), createElementBlock("div", bi, [
        renderSlot(i.$slots, "default")
      ])) : renderSlot(i.$slots, "default", { key: 1 })
    ], 10, mi));
  }
});
var pi = defineComponent({
  __name: "BThead",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("thead", {
      role: "rowgroup",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var hi = defineComponent({
  __name: "BTr",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("tr", {
      role: "row",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var yi = ["id", "data-bs-target", "aria-controls", "aria-selected", "onClick"];
var ll = Symbol();
var Bi = defineComponent({
  __name: "BTabs",
  props: {
    activeNavItemClass: null,
    activeTabClass: null,
    align: null,
    card: { default: false },
    contentClass: null,
    end: { default: false },
    fill: { default: false },
    id: null,
    justified: { default: false },
    lazy: { default: false },
    navClass: null,
    navWrapperClass: null,
    noFade: { default: false },
    noNavStyle: { default: false },
    pills: { default: false },
    small: { default: false },
    tag: { default: "div" },
    vertical: { default: false },
    modelValue: { default: -1 }
  },
  emits: ["update:modelValue", "activate-tab", "click"],
  setup(e, { emit: t }) {
    const a = e, l = r(toRef(a, "card")), n = r(toRef(a, "end")), i = r(toRef(a, "fill")), f = r(toRef(a, "justified")), d = r(toRef(a, "lazy")), v = r(toRef(a, "noFade")), b = r(toRef(a, "noNavStyle")), g = r(toRef(a, "pills")), B = r(toRef(a, "small")), h2 = r(toRef(a, "vertical")), k = useSlots(), w = ref(a.modelValue), y = ref(""), V = computed({
      get: () => w.value,
      set: (_) => {
        w.value = _, $.value.length > 0 && _ >= 0 && _ < $.value.length ? y.value = $.value[_].buttonId : y.value = "", t("update:modelValue", _);
      }
    }), $ = computed(() => {
      let _ = [];
      return k.default && (_ = M(k).map((T, D) => {
        T.props || (T.props = {});
        const q = T.props["button-id"] || Ie("tab"), le = T.props.id || Ie(), te = V.value > -1 ? D === V.value : T.props.active === "", K = T.props["title-item-class"], de = T.props["title-link-attributes"];
        return {
          buttonId: q,
          contentId: le,
          active: te,
          disabled: T.props.disabled === "" || T.props.disabled === true,
          navItemClasses: [
            {
              active: te,
              disabled: T.props.disabled === "" || T.props.disabled === true
            },
            te && a.activeNavItemClass ? a.activeNavItemClass : null,
            T.props["title-link-class"]
          ],
          tabClasses: [
            {
              fade: !v.value
            },
            te && a.activeTabClass ? a.activeTabClass : null
          ],
          target: `#${le}`,
          title: T.props.title,
          titleItemClass: K,
          titleLinkAttributes: de,
          onClick: T.props.onClick,
          tab: T
        };
      })), _;
    }), z = computed(() => !(($ == null ? void 0 : $.value) && $.value.length > 0)), L = computed(() => ({
      "d-flex": h2.value,
      "align-items-start": h2.value
    })), S = computed(() => ({
      "nav-pills": g.value,
      "flex-column me-3": h2.value,
      [`justify-content-${a.align}`]: a.align !== void 0,
      "nav-fill": i.value,
      "card-header-tabs": l.value,
      "nav-justified": f.value,
      "nav-tabs": !b.value && !g.value,
      small: B.value
    })), A = (_) => {
      let T = false;
      if (_ !== void 0 && _ > -1 && _ < $.value.length && !$.value[_].disabled && (V.value < 0 || $.value[_].buttonId !== y.value)) {
        const D = new ut("activate-tab", { cancelable: true, vueTarget: this });
        t("activate-tab", _, V.value, D), D.defaultPrevented || (V.value = _, T = true);
      }
      return !T && a.modelValue !== V.value && t("update:modelValue", V.value), T;
    }, I = (_, T) => {
      var D;
      A(T), T >= 0 && !$.value[T].disabled && ((D = $.value[T]) == null ? void 0 : D.onClick) && typeof $.value[T].onClick == "function" && $.value[T].onClick(_);
    }, M = (_) => !_ || !_.default ? [] : _.default().reduce((T, D) => (typeof D.type == "symbol" ? T = T.concat(D.children) : T.push(D), T), []).filter((T) => {
      var D;
      return ((D = T.type) == null ? void 0 : D.__name) === "BTab";
    });
    return A(w.value), watch(
      () => a.modelValue,
      (_, T) => {
        if (_ === T)
          return;
        if (_ = Math.max(_, -1), T = Math.max(T, -1), $.value.length <= 0) {
          V.value = -1;
          return;
        }
        const D = _ > T;
        let q = _;
        const le = $.value.length - 1;
        for (; q >= 0 && q <= le && $.value[q].disabled; )
          q += D ? 1 : -1;
        if (q < 0) {
          A(0);
          return;
        }
        if (q >= $.value.length) {
          A($.value.length - 1);
          return;
        }
        A(q);
      }
    ), watch(
      () => $.value,
      () => {
        let _ = $.value.map((T) => T.active && !T.disabled).lastIndexOf(true);
        _ < 0 && (V.value >= $.value.length ? _ = $.value.map((T) => !T.disabled).lastIndexOf(true) : $.value[V.value] && !$.value[V.value].disabled && (_ = V.value)), _ < 0 && (_ = $.value.map((T) => !T.disabled).indexOf(true)), $.value.forEach((T, D) => T.active = D === _), A(_);
      }
    ), onMounted(() => {
      if (V.value < 0 && $.value.length > 0 && !$.value.some((_) => _.active)) {
        const _ = $.value.map((T) => !T.disabled).indexOf(true);
        A(_ >= 0 ? _ : -1);
      }
    }), provide(ll, {
      lazy: d.value,
      card: l.value
    }), (_, T) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      class: normalizeClass(["tabs", unref(L)])
    }, {
      default: withCtx(() => [
        unref(n) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["tab-content", e.contentClass])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref($), ({ tab: D, contentId: q, tabClasses: le, active: te }, K) => (openBlock(), createBlock(resolveDynamicComponent(D), {
            id: q,
            key: K,
            class: normalizeClass(le),
            active: te
          }, null, 8, ["id", "class", "active"]))), 128)),
          unref(z) ? (openBlock(), createElementBlock("div", {
            key: "bv-empty-tab",
            class: normalizeClass(["tab-pane active", { "card-body": unref(l) }])
          }, [
            renderSlot(_.$slots, "empty")
          ], 2)) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass([e.navWrapperClass, { "card-header": unref(l), "ms-auto": e.vertical && unref(n) }])
        }, [
          createBaseVNode("ul", {
            class: normalizeClass(["nav", [unref(S), e.navClass]]),
            role: "tablist"
          }, [
            renderSlot(_.$slots, "tabs-start"),
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref($), ({ tab: D, buttonId: q, contentId: le, navItemClasses: te, active: K, target: de }, se) => (openBlock(), createElementBlock("li", {
              key: se,
              class: normalizeClass(["nav-item", D.props["title-item-class"]])
            }, [
              createBaseVNode("button", mergeProps({
                id: q,
                class: ["nav-link", te],
                "data-bs-toggle": "tab",
                "data-bs-target": de,
                role: "tab",
                "aria-controls": le,
                "aria-selected": K
              }, D.props["title-link-attributes"], {
                onClick: withModifiers((Q) => I(Q, se), ["stop", "prevent"])
              }), [
                D.children && D.children.title ? (openBlock(), createBlock(resolveDynamicComponent(D.children.title), { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(D.props.title), 1)
                ], 64))
              ], 16, yi)
            ], 2))), 128)),
            renderSlot(_.$slots, "tabs-end")
          ], 2)
        ], 2),
        unref(n) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(["tab-content", e.contentClass])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref($), ({ tab: D, contentId: q, tabClasses: le, active: te }, K) => (openBlock(), createBlock(resolveDynamicComponent(D), {
            id: q,
            key: K,
            class: normalizeClass(le),
            active: te
          }, null, 8, ["id", "class", "active"]))), 128)),
          unref(z) ? (openBlock(), createElementBlock("div", {
            key: "bv-empty-tab",
            class: normalizeClass(["tab-pane active", { "card-body": unref(l) }])
          }, [
            renderSlot(_.$slots, "empty")
          ], 2)) : createCommentVNode("", true)
        ], 2))
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var $i = defineComponent({
  __name: "BTab",
  props: {
    id: null,
    title: null,
    active: { default: false },
    buttonId: { default: void 0 },
    disabled: { default: false },
    lazy: { default: void 0 },
    lazyOnce: { default: void 0 },
    noBody: { type: [Boolean, String], default: false },
    tag: { default: "div" },
    titleItemClass: { default: void 0 },
    titleLinkAttributes: { default: void 0 },
    titleLinkClass: { default: void 0 }
  },
  setup(e) {
    const t = e, a = ref(false), l = r(toRef(t, "active")), n = r(toRef(t, "disabled")), i = r(toRef(t, t.lazyOnce !== void 0 ? "lazyOnce" : "lazy")), f = inject(ll, null), d = computed(() => (f == null ? void 0 : f.lazy) || i.value), v = computed(() => t.lazyOnce !== void 0), b = computed(() => l.value && !n.value), g = computed(() => {
      const h2 = d.value && v.value && a.value;
      return b.value || !d.value || h2;
    }), B = computed(() => ({
      active: l.value,
      show: l.value,
      "card-body": (f == null ? void 0 : f.card) && t.noBody === false
    }));
    return watch(
      () => g.value,
      (h2) => {
        h2 && !a.value && (a.value = true);
      }
    ), (h2, k) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      class: normalizeClass(["tab-pane", unref(B)]),
      role: "tabpanel",
      "aria-labelledby": "profile-tab"
    }, {
      default: withCtx(() => [
        unref(g) ? renderSlot(h2.$slots, "default", { key: 0 }) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var ki = {
  BAccordion: Ul,
  BAccordionItem: cn,
  BNavText: ar,
  BAlert: vn,
  BAvatar: hn,
  BAvatarGroup: mn,
  BNavForm: Xs,
  BBadge: Sn,
  BBreadcrumb: _n,
  BBreadcrumbItem: Ia,
  BButton: Ke,
  BButtonGroup: Fn,
  BButtonToolbar: zn,
  BCard: Ha,
  BCardBody: Na,
  BCardFooter: La,
  BCardGroup: Nn,
  BCardHeader: Oa,
  BCardImg: ot,
  BCardSubtitle: Pa,
  BCardText: Ln,
  BCardTitle: za,
  BCarousel: Xn,
  BCarouselSlide: eo,
  BCloseButton: Ge,
  BCol: Ue,
  BCollapse: _a,
  BContainer: io,
  BDropdown: ja,
  BDropdownDivider: vo,
  BDropdownForm: ho,
  BDropdownGroup: ko,
  BDropdownHeader: To,
  BDropdownItem: _o,
  BDropdownItemButton: xo,
  BDropdownText: Oo,
  BForm: Ma,
  BFormCheckbox: Ga,
  BFormCheckboxGroup: Mo,
  BFormFloatingLabel: Lo,
  BFormGroup: Zo,
  BFormInput: as,
  BFormInvalidFeedback: At,
  BFormRadio: Ua,
  BFormRadioGroup: is,
  BFormRow: tt,
  BFormSelect: fs,
  BFormSelectOption: Ht,
  BFormSelectOptionGroup: Xa,
  BFormText: xt,
  BFormTextarea: Is,
  BFormTag: Ka,
  BFormTags: Vs,
  BFormValidFeedback: It,
  BImg: Nt,
  BInputGroup: Hs,
  BInputGroupAddon: Et,
  BInputGroupAppend: Es,
  BInputGroupPrepend: Ds,
  BInputGroupText: Ja,
  BLink: Ce,
  BListGroup: Rs,
  BListGroupItem: qs,
  BModal: Ws,
  BNav: Us,
  BNavbar: lr,
  BNavbarBrand: sr,
  BNavbarNav: rr,
  BNavbarToggle: ur,
  BNavItem: Zs,
  BNavItemDropdown: er,
  BOffcanvas: br,
  BOverlay: gr,
  BPagination: wr,
  BPlaceholder: we,
  BPlaceholderButton: el,
  BPlaceholderCard: Tr,
  BPlaceholderTable: Vr,
  BPlaceholderWrapper: _r,
  BPopover: zr,
  BProgress: Nr,
  BProgressBar: tl,
  BRow: Er,
  BSkeleton: at,
  BSkeletonIcon: Dr,
  BSkeletonTable: jr,
  BSkeletonWrapper: Mr,
  BSpinner: ft,
  BTab: $i,
  BTable: ii,
  BTableSimple: vt,
  BTbody: ui,
  BTd: fi,
  BTfoot: vi,
  BTh: gi,
  BThead: pi,
  BTr: hi,
  BToast: Da,
  BToaster: Vt,
  BToastContainer: Vt,
  BTabs: Bi,
  BTransition: Lt,
  BToastPlugin: ro
};
var Ti = {
  install(e, t = {}) {
    Object.entries(ki).forEach(([a, l]) => {
      e.component(a, l);
    }), Object.entries(on).forEach(([a, l]) => {
      e.directive(a, l);
    }), Ml(e);
  }
};
export {
  Ul as BAccordion,
  cn as BAccordionItem,
  vn as BAlert,
  hn as BAvatar,
  mn as BAvatarGroup,
  Sn as BBadge,
  _n as BBreadcrumb,
  Ia as BBreadcrumbItem,
  Ke as BButton,
  Fn as BButtonGroup,
  zn as BButtonToolbar,
  Ha as BCard,
  Na as BCardBody,
  La as BCardFooter,
  Nn as BCardGroup,
  Oa as BCardHeader,
  ot as BCardImg,
  Pa as BCardSubtitle,
  Ln as BCardText,
  za as BCardTitle,
  Xn as BCarousel,
  eo as BCarouselSlide,
  Ge as BCloseButton,
  Ue as BCol,
  _a as BCollapse,
  io as BContainer,
  ja as BDropdown,
  vo as BDropdownDivider,
  ho as BDropdownForm,
  ko as BDropdownGroup,
  To as BDropdownHeader,
  _o as BDropdownItem,
  xo as BDropdownItemButton,
  Oo as BDropdownText,
  Ma as BForm,
  Ga as BFormCheckbox,
  Mo as BFormCheckboxGroup,
  Lo as BFormFloatingLabel,
  Zo as BFormGroup,
  as as BFormInput,
  At as BFormInvalidFeedback,
  Ua as BFormRadio,
  is as BFormRadioGroup,
  tt as BFormRow,
  fs as BFormSelect,
  Ht as BFormSelectOption,
  Xa as BFormSelectOptionGroup,
  Ka as BFormTag,
  Vs as BFormTags,
  xt as BFormText,
  Is as BFormTextarea,
  It as BFormValidFeedback,
  Nt as BImg,
  Hs as BInputGroup,
  Et as BInputGroupAddon,
  Es as BInputGroupAppend,
  Ds as BInputGroupPrepend,
  Ja as BInputGroupText,
  Ce as BLink,
  Rs as BListGroup,
  qs as BListGroupItem,
  Ws as BModal,
  Us as BNav,
  Xs as BNavForm,
  Zs as BNavItem,
  er as BNavItemDropdown,
  ar as BNavText,
  lr as BNavbar,
  sr as BNavbarBrand,
  rr as BNavbarNav,
  ur as BNavbarToggle,
  br as BOffcanvas,
  gr as BOverlay,
  wr as BPagination,
  we as BPlaceholder,
  el as BPlaceholderButton,
  Tr as BPlaceholderCard,
  Vr as BPlaceholderTable,
  _r as BPlaceholderWrapper,
  zr as BPopover,
  Nr as BProgress,
  tl as BProgressBar,
  Er as BRow,
  at as BSkeleton,
  Dr as BSkeletonIcon,
  jr as BSkeletonTable,
  Mr as BSkeletonWrapper,
  ft as BSpinner,
  $i as BTab,
  ii as BTable,
  vt as BTableSimple,
  Bi as BTabs,
  ui as BTbody,
  fi as BTd,
  vi as BTfoot,
  gi as BTh,
  pi as BThead,
  Da as BToast,
  Vt as BToastContainer,
  ro as BToastPlugin,
  Vt as BToaster,
  hi as BTr,
  Lt as BTransition,
  Ti as BootstrapVue3,
  ut as BvEvent,
  Ti as default,
  Gl as useBreadcrumb,
  qa as useToast,
  Kl as vBPopover,
  Pt as vBToggle,
  tn as vBTooltip,
  an as vBVisible
};
//# sourceMappingURL=bootstrap-vue-3.js.map
